
Blinking_LED_using_push_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001836  000018ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  000018d4  2**0
                  ALLOC
  3 .stab         00001b9c  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000baf  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__vector_10>
      2c:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 05 	call	0xabe	; 0xabe <main>
      8a:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTONS_voidInit>:
#include "dio_interface.h"
#include "buttons_interface.h"
#include "timers_interface.h"

void BUTTONS_voidInit(void) 
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(u8_BUTTON2_PORT,u8_BUTTON2_COL,u8_DIO_OUTPUT_PIN)          ;
      9a:	8a e0       	ldi	r24, 0x0A	; 10
      9c:	66 e0       	ldi	r22, 0x06	; 6
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_BUTTON2_PORT,u8_BUTTON2_ROW,u8_DIO_INPUT_PIN)           ;
      a4:	8a e0       	ldi	r24, 0x0A	; 10
      a6:	63 e0       	ldi	r22, 0x03	; 3
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinVal(u8_BUTTON2_PORT,u8_BUTTON2_COL,u8_DIO_PIN_LOW)			;
      ae:	8a e0       	ldi	r24, 0x0A	; 10
      b0:	66 e0       	ldi	r22, 0x06	; 6
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
}
      b8:	cf 91       	pop	r28
      ba:	df 91       	pop	r29
      bc:	08 95       	ret

000000be <BUTTONS_u8GetRead>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


uint8_t BUTTONS_u8GetRead(uint8_t u8_buttonNum,uint8_t* pu8_buttonReturnVal)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	00 d0       	rcall	.+0      	; 0xc4 <BUTTONS_u8GetRead+0x6>
      c4:	00 d0       	rcall	.+0      	; 0xc6 <BUTTONS_u8GetRead+0x8>
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	8a 83       	std	Y+2, r24	; 0x02
      cc:	7c 83       	std	Y+4, r23	; 0x04
      ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ReturnErrorFlag = u8_BUTTON_OK ; 
      d0:	8c e0       	ldi	r24, 0x0C	; 12
      d2:	89 83       	std	Y+1, r24	; 0x01
	if(u8_buttonNum==u8_BUTTON2 && pu8_buttonReturnVal!=NULL_POINTER)
      d4:	8a 81       	ldd	r24, Y+2	; 0x02
      d6:	8b 30       	cpi	r24, 0x0B	; 11
      d8:	91 f4       	brne	.+36     	; 0xfe <BUTTONS_u8GetRead+0x40>
      da:	8b 81       	ldd	r24, Y+3	; 0x03
      dc:	9c 81       	ldd	r25, Y+4	; 0x04
      de:	00 97       	sbiw	r24, 0x00	; 0
      e0:	71 f0       	breq	.+28     	; 0xfe <BUTTONS_u8GetRead+0x40>
	{
		DIO_u8GetPinVal(u8_BUTTON2_PORT,u8_BUTTON2_ROW,pu8_buttonReturnVal);
      e2:	2b 81       	ldd	r18, Y+3	; 0x03
      e4:	3c 81       	ldd	r19, Y+4	; 0x04
      e6:	8a e0       	ldi	r24, 0x0A	; 10
      e8:	63 e0       	ldi	r22, 0x03	; 3
      ea:	a9 01       	movw	r20, r18
      ec:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8GetPinVal>
		TIMER0_u8BusyWait(u8_DEBOUNCING_TIME_mS) ;
      f0:	68 e0       	ldi	r22, 0x08	; 8
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 66 08 	call	0x10cc	; 0x10cc <TIMER0_u8BusyWait>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <BUTTONS_u8GetRead+0x44>
	}
	else 
	{
		u8_ReturnErrorFlag = u8_BUTTON_NOK ; 
      fe:	8d e0       	ldi	r24, 0x0D	; 13
     100:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ReturnErrorFlag ;
     102:	89 81       	ldd	r24, Y+1	; 0x01

}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	cf 91       	pop	r28
     10e:	df 91       	pop	r29
     110:	08 95       	ret

00000112 <BUTTONS_u8PullUpEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t BUTTONS_u8PullUpEn(uint8_t u8_buttonNum)
{
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	00 d0       	rcall	.+0      	; 0x118 <BUTTONS_u8PullUpEn+0x6>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ReturnErrorFlag = u8_BUTTON_OK ; 
     11e:	8c e0       	ldi	r24, 0x0C	; 12
     120:	89 83       	std	Y+1, r24	; 0x01
	if(u8_buttonNum==u8_BUTTON2)
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	8b 30       	cpi	r24, 0x0B	; 11
     126:	41 f4       	brne	.+16     	; 0x138 <BUTTONS_u8PullUpEn+0x26>
	{
		DIO_u8SetPinVal(u8_BUTTON2_PORT,u8_BUTTON2_ROW,u8_DIO_PIN_HIGH) ;
     128:	8a e0       	ldi	r24, 0x0A	; 10
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	41 e0       	ldi	r20, 0x01	; 1
     12e:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
		DIO_voidEnablePullUps() ; 
     132:	0e 94 cf 04 	call	0x99e	; 0x99e <DIO_voidEnablePullUps>
     136:	02 c0       	rjmp	.+4      	; 0x13c <BUTTONS_u8PullUpEn+0x2a>
	}
	else 
	{
		u8_ReturnErrorFlag = u8_BUTTON_NOK ; 
     138:	8d e0       	ldi	r24, 0x0D	; 13
     13a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ReturnErrorFlag ;
     13c:	89 81       	ldd	r24, Y+1	; 0x01

}
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	00 d0       	rcall	.+0      	; 0x14e <DIO_u8SetPinVal+0x6>
     14e:	00 d0       	rcall	.+0      	; 0x150 <DIO_u8SetPinVal+0x8>
     150:	00 d0       	rcall	.+0      	; 0x152 <DIO_u8SetPinVal+0xa>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	8a 83       	std	Y+2, r24	; 0x02
     158:	6b 83       	std	Y+3, r22	; 0x03
     15a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     160:	8b 81       	ldd	r24, Y+3	; 0x03
     162:	88 30       	cpi	r24, 0x08	; 8
     164:	08 f0       	brcs	.+2      	; 0x168 <DIO_u8SetPinVal+0x20>
     166:	ee c0       	rjmp	.+476    	; 0x344 <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	3e 83       	std	Y+6, r19	; 0x06
     170:	2d 83       	std	Y+5, r18	; 0x05
     172:	8d 81       	ldd	r24, Y+5	; 0x05
     174:	9e 81       	ldd	r25, Y+6	; 0x06
     176:	89 30       	cpi	r24, 0x09	; 9
     178:	91 05       	cpc	r25, r1
     17a:	09 f4       	brne	.+2      	; 0x17e <DIO_u8SetPinVal+0x36>
     17c:	4a c0       	rjmp	.+148    	; 0x212 <DIO_u8SetPinVal+0xca>
     17e:	2d 81       	ldd	r18, Y+5	; 0x05
     180:	3e 81       	ldd	r19, Y+6	; 0x06
     182:	2a 30       	cpi	r18, 0x0A	; 10
     184:	31 05       	cpc	r19, r1
     186:	34 f4       	brge	.+12     	; 0x194 <DIO_u8SetPinVal+0x4c>
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	91 05       	cpc	r25, r1
     190:	71 f0       	breq	.+28     	; 0x1ae <DIO_u8SetPinVal+0x66>
     192:	d5 c0       	rjmp	.+426    	; 0x33e <DIO_u8SetPinVal+0x1f6>
     194:	2d 81       	ldd	r18, Y+5	; 0x05
     196:	3e 81       	ldd	r19, Y+6	; 0x06
     198:	2a 30       	cpi	r18, 0x0A	; 10
     19a:	31 05       	cpc	r19, r1
     19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_u8SetPinVal+0x58>
     19e:	6b c0       	rjmp	.+214    	; 0x276 <DIO_u8SetPinVal+0x12e>
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	8b 30       	cpi	r24, 0x0B	; 11
     1a6:	91 05       	cpc	r25, r1
     1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_u8SetPinVal+0x64>
     1aa:	97 c0       	rjmp	.+302    	; 0x2da <DIO_u8SetPinVal+0x192>
     1ac:	c8 c0       	rjmp	.+400    	; 0x33e <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	88 23       	and	r24, r24
     1b2:	a9 f4       	brne	.+42     	; 0x1de <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
     1b4:	ab e3       	ldi	r26, 0x3B	; 59
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	eb e3       	ldi	r30, 0x3B	; 59
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	48 2f       	mov	r20, r24
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 2e       	mov	r0, r18
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8SetPinVal+0x8a>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8SetPinVal+0x86>
     1d6:	80 95       	com	r24
     1d8:	84 23       	and	r24, r20
     1da:	8c 93       	st	X, r24
     1dc:	b5 c0       	rjmp	.+362    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     1de:	8c 81       	ldd	r24, Y+4	; 0x04
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	a1 f4       	brne	.+40     	; 0x20c <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
     1e4:	ab e3       	ldi	r26, 0x3B	; 59
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	eb e3       	ldi	r30, 0x3B	; 59
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	48 2f       	mov	r20, r24
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	28 2f       	mov	r18, r24
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	02 2e       	mov	r0, r18
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_u8SetPinVal+0xba>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_u8SetPinVal+0xb6>
     206:	84 2b       	or	r24, r20
     208:	8c 93       	st	X, r24
     20a:	9e c0       	rjmp	.+316    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	9b c0       	rjmp	.+310    	; 0x348 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
     212:	8c 81       	ldd	r24, Y+4	; 0x04
     214:	88 23       	and	r24, r24
     216:	a9 f4       	brne	.+42     	; 0x242 <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
     218:	a8 e3       	ldi	r26, 0x38	; 56
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e8 e3       	ldi	r30, 0x38	; 56
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 2e       	mov	r0, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_u8SetPinVal+0xee>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_u8SetPinVal+0xea>
     23a:	80 95       	com	r24
     23c:	84 23       	and	r24, r20
     23e:	8c 93       	st	X, r24
     240:	83 c0       	rjmp	.+262    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     242:	8c 81       	ldd	r24, Y+4	; 0x04
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	a1 f4       	brne	.+40     	; 0x270 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
     248:	a8 e3       	ldi	r26, 0x38	; 56
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	e8 e3       	ldi	r30, 0x38	; 56
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	48 2f       	mov	r20, r24
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	28 2f       	mov	r18, r24
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	02 2e       	mov	r0, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_u8SetPinVal+0x11e>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_u8SetPinVal+0x11a>
     26a:	84 2b       	or	r24, r20
     26c:	8c 93       	st	X, r24
     26e:	6c c0       	rjmp	.+216    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	69 c0       	rjmp	.+210    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
     276:	8c 81       	ldd	r24, Y+4	; 0x04
     278:	88 23       	and	r24, r24
     27a:	a9 f4       	brne	.+42     	; 0x2a6 <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
     27c:	a5 e3       	ldi	r26, 0x35	; 53
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e5 e3       	ldi	r30, 0x35	; 53
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	48 2f       	mov	r20, r24
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	28 2f       	mov	r18, r24
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	02 2e       	mov	r0, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8SetPinVal+0x152>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8SetPinVal+0x14e>
     29e:	80 95       	com	r24
     2a0:	84 23       	and	r24, r20
     2a2:	8c 93       	st	X, r24
     2a4:	51 c0       	rjmp	.+162    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	a1 f4       	brne	.+40     	; 0x2d4 <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
     2ac:	a5 e3       	ldi	r26, 0x35	; 53
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e5 e3       	ldi	r30, 0x35	; 53
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	48 2f       	mov	r20, r24
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	28 2f       	mov	r18, r24
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 2e       	mov	r0, r18
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8SetPinVal+0x182>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	0a 94       	dec	r0
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8SetPinVal+0x17e>
     2ce:	84 2b       	or	r24, r20
     2d0:	8c 93       	st	X, r24
     2d2:	3a c0       	rjmp	.+116    	; 0x348 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	89 83       	std	Y+1, r24	; 0x01
     2d8:	37 c0       	rjmp	.+110    	; 0x348 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
     2da:	8c 81       	ldd	r24, Y+4	; 0x04
     2dc:	88 23       	and	r24, r24
     2de:	a9 f4       	brne	.+42     	; 0x30a <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
     2e0:	a2 e3       	ldi	r26, 0x32	; 50
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e2 e3       	ldi	r30, 0x32	; 50
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	48 2f       	mov	r20, r24
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	28 2f       	mov	r18, r24
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	02 2e       	mov	r0, r18
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_u8SetPinVal+0x1b6>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_u8SetPinVal+0x1b2>
     302:	80 95       	com	r24
     304:	84 23       	and	r24, r20
     306:	8c 93       	st	X, r24
     308:	1f c0       	rjmp	.+62     	; 0x348 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
     30a:	8c 81       	ldd	r24, Y+4	; 0x04
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	a1 f4       	brne	.+40     	; 0x338 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
     310:	a2 e3       	ldi	r26, 0x32	; 50
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e2 e3       	ldi	r30, 0x32	; 50
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	48 2f       	mov	r20, r24
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	02 2e       	mov	r0, r18
     328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_u8SetPinVal+0x1e6>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_u8SetPinVal+0x1e2>
     332:	84 2b       	or	r24, r20
     334:	8c 93       	st	X, r24
     336:	08 c0       	rjmp	.+16     	; 0x348 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	05 c0       	rjmp	.+10     	; 0x348 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	89 83       	std	Y+1, r24	; 0x01
     342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     348:	89 81       	ldd	r24, Y+1	; 0x01
}
     34a:	26 96       	adiw	r28, 0x06	; 6
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <DIO_u8SetPinDir+0x6>
     362:	00 d0       	rcall	.+0      	; 0x364 <DIO_u8SetPinDir+0x8>
     364:	00 d0       	rcall	.+0      	; 0x366 <DIO_u8SetPinDir+0xa>
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	8a 83       	std	Y+2, r24	; 0x02
     36c:	6b 83       	std	Y+3, r22	; 0x03
     36e:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	88 30       	cpi	r24, 0x08	; 8
     378:	08 f0       	brcs	.+2      	; 0x37c <DIO_u8SetPinDir+0x20>
     37a:	ee c0       	rjmp	.+476    	; 0x558 <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	3e 83       	std	Y+6, r19	; 0x06
     384:	2d 83       	std	Y+5, r18	; 0x05
     386:	8d 81       	ldd	r24, Y+5	; 0x05
     388:	9e 81       	ldd	r25, Y+6	; 0x06
     38a:	89 30       	cpi	r24, 0x09	; 9
     38c:	91 05       	cpc	r25, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <DIO_u8SetPinDir+0x36>
     390:	4a c0       	rjmp	.+148    	; 0x426 <DIO_u8SetPinDir+0xca>
     392:	2d 81       	ldd	r18, Y+5	; 0x05
     394:	3e 81       	ldd	r19, Y+6	; 0x06
     396:	2a 30       	cpi	r18, 0x0A	; 10
     398:	31 05       	cpc	r19, r1
     39a:	34 f4       	brge	.+12     	; 0x3a8 <DIO_u8SetPinDir+0x4c>
     39c:	8d 81       	ldd	r24, Y+5	; 0x05
     39e:	9e 81       	ldd	r25, Y+6	; 0x06
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	91 05       	cpc	r25, r1
     3a4:	71 f0       	breq	.+28     	; 0x3c2 <DIO_u8SetPinDir+0x66>
     3a6:	d5 c0       	rjmp	.+426    	; 0x552 <DIO_u8SetPinDir+0x1f6>
     3a8:	2d 81       	ldd	r18, Y+5	; 0x05
     3aa:	3e 81       	ldd	r19, Y+6	; 0x06
     3ac:	2a 30       	cpi	r18, 0x0A	; 10
     3ae:	31 05       	cpc	r19, r1
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_u8SetPinDir+0x58>
     3b2:	6b c0       	rjmp	.+214    	; 0x48a <DIO_u8SetPinDir+0x12e>
     3b4:	8d 81       	ldd	r24, Y+5	; 0x05
     3b6:	9e 81       	ldd	r25, Y+6	; 0x06
     3b8:	8b 30       	cpi	r24, 0x0B	; 11
     3ba:	91 05       	cpc	r25, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_u8SetPinDir+0x64>
     3be:	97 c0       	rjmp	.+302    	; 0x4ee <DIO_u8SetPinDir+0x192>
     3c0:	c8 c0       	rjmp	.+400    	; 0x552 <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     3c2:	8c 81       	ldd	r24, Y+4	; 0x04
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	a1 f4       	brne	.+40     	; 0x3f0 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
     3c8:	aa e3       	ldi	r26, 0x3A	; 58
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	ea e3       	ldi	r30, 0x3A	; 58
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	48 2f       	mov	r20, r24
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	28 2f       	mov	r18, r24
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	02 2e       	mov	r0, r18
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8SetPinDir+0x8a>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8SetPinDir+0x86>
     3ea:	84 2b       	or	r24, r20
     3ec:	8c 93       	st	X, r24
     3ee:	b6 c0       	rjmp	.+364    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	88 23       	and	r24, r24
     3f4:	a9 f4       	brne	.+42     	; 0x420 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
     3f6:	aa e3       	ldi	r26, 0x3A	; 58
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	ea e3       	ldi	r30, 0x3A	; 58
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	48 2f       	mov	r20, r24
     402:	8b 81       	ldd	r24, Y+3	; 0x03
     404:	28 2f       	mov	r18, r24
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 2e       	mov	r0, r18
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_u8SetPinDir+0xb8>
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	0a 94       	dec	r0
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_u8SetPinDir+0xb4>
     418:	80 95       	com	r24
     41a:	84 23       	and	r24, r20
     41c:	8c 93       	st	X, r24
     41e:	9e c0       	rjmp	.+316    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	9b c0       	rjmp	.+310    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     426:	8c 81       	ldd	r24, Y+4	; 0x04
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	a1 f4       	brne	.+40     	; 0x454 <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
     42c:	a7 e3       	ldi	r26, 0x37	; 55
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	e7 e3       	ldi	r30, 0x37	; 55
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	48 2f       	mov	r20, r24
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 2e       	mov	r0, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_u8SetPinDir+0xee>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_u8SetPinDir+0xea>
     44e:	84 2b       	or	r24, r20
     450:	8c 93       	st	X, r24
     452:	84 c0       	rjmp	.+264    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	88 23       	and	r24, r24
     458:	a9 f4       	brne	.+42     	; 0x484 <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
     45a:	a7 e3       	ldi	r26, 0x37	; 55
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e7 e3       	ldi	r30, 0x37	; 55
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_u8SetPinDir+0x11c>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_u8SetPinDir+0x118>
     47c:	80 95       	com	r24
     47e:	84 23       	and	r24, r20
     480:	8c 93       	st	X, r24
     482:	6c c0       	rjmp	.+216    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	69 c0       	rjmp	.+210    	; 0x55c <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     48a:	8c 81       	ldd	r24, Y+4	; 0x04
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	a1 f4       	brne	.+40     	; 0x4b8 <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
     490:	a4 e3       	ldi	r26, 0x34	; 52
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	e4 e3       	ldi	r30, 0x34	; 52
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	48 2f       	mov	r20, r24
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	28 2f       	mov	r18, r24
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 2e       	mov	r0, r18
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_u8SetPinDir+0x152>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_u8SetPinDir+0x14e>
     4b2:	84 2b       	or	r24, r20
     4b4:	8c 93       	st	X, r24
     4b6:	52 c0       	rjmp	.+164    	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     4b8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ba:	88 23       	and	r24, r24
     4bc:	a9 f4       	brne	.+42     	; 0x4e8 <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
     4be:	a4 e3       	ldi	r26, 0x34	; 52
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e4 e3       	ldi	r30, 0x34	; 52
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	48 2f       	mov	r20, r24
     4ca:	8b 81       	ldd	r24, Y+3	; 0x03
     4cc:	28 2f       	mov	r18, r24
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 2e       	mov	r0, r18
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8SetPinDir+0x180>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8SetPinDir+0x17c>
     4e0:	80 95       	com	r24
     4e2:	84 23       	and	r24, r20
     4e4:	8c 93       	st	X, r24
     4e6:	3a c0       	rjmp	.+116    	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	89 83       	std	Y+1, r24	; 0x01
     4ec:	37 c0       	rjmp	.+110    	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	a1 f4       	brne	.+40     	; 0x51c <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
     4f4:	a1 e3       	ldi	r26, 0x31	; 49
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	e1 e3       	ldi	r30, 0x31	; 49
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	48 2f       	mov	r20, r24
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	28 2f       	mov	r18, r24
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	02 2e       	mov	r0, r18
     50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_u8SetPinDir+0x1b6>
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	0a 94       	dec	r0
     514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_u8SetPinDir+0x1b2>
     516:	84 2b       	or	r24, r20
     518:	8c 93       	st	X, r24
     51a:	20 c0       	rjmp	.+64     	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	88 23       	and	r24, r24
     520:	a9 f4       	brne	.+42     	; 0x54c <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
     522:	a1 e3       	ldi	r26, 0x31	; 49
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	e1 e3       	ldi	r30, 0x31	; 49
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	48 2f       	mov	r20, r24
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	28 2f       	mov	r18, r24
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	02 2e       	mov	r0, r18
     53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_u8SetPinDir+0x1e4>
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	0a 94       	dec	r0
     542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_u8SetPinDir+0x1e0>
     544:	80 95       	com	r24
     546:	84 23       	and	r24, r20
     548:	8c 93       	st	X, r24
     54a:	08 c0       	rjmp	.+16     	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	05 c0       	rjmp	.+10     	; 0x55c <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	89 83       	std	Y+1, r24	; 0x01
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     55c:	89 81       	ldd	r24, Y+1	; 0x01
}
     55e:	26 96       	adiw	r28, 0x06	; 6
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	cf 91       	pop	r28
     56c:	df 91       	pop	r29
     56e:	08 95       	ret

00000570 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	00 d0       	rcall	.+0      	; 0x576 <DIO_u8SetPortVal+0x6>
     576:	00 d0       	rcall	.+0      	; 0x578 <DIO_u8SetPortVal+0x8>
     578:	0f 92       	push	r0
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	8a 83       	std	Y+2, r24	; 0x02
     580:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	3d 83       	std	Y+5, r19	; 0x05
     58e:	2c 83       	std	Y+4, r18	; 0x04
     590:	8c 81       	ldd	r24, Y+4	; 0x04
     592:	9d 81       	ldd	r25, Y+5	; 0x05
     594:	89 30       	cpi	r24, 0x09	; 9
     596:	91 05       	cpc	r25, r1
     598:	d9 f0       	breq	.+54     	; 0x5d0 <DIO_u8SetPortVal+0x60>
     59a:	2c 81       	ldd	r18, Y+4	; 0x04
     59c:	3d 81       	ldd	r19, Y+5	; 0x05
     59e:	2a 30       	cpi	r18, 0x0A	; 10
     5a0:	31 05       	cpc	r19, r1
     5a2:	34 f4       	brge	.+12     	; 0x5b0 <DIO_u8SetPortVal+0x40>
     5a4:	8c 81       	ldd	r24, Y+4	; 0x04
     5a6:	9d 81       	ldd	r25, Y+5	; 0x05
     5a8:	88 30       	cpi	r24, 0x08	; 8
     5aa:	91 05       	cpc	r25, r1
     5ac:	61 f0       	breq	.+24     	; 0x5c6 <DIO_u8SetPortVal+0x56>
     5ae:	1f c0       	rjmp	.+62     	; 0x5ee <DIO_u8SetPortVal+0x7e>
     5b0:	2c 81       	ldd	r18, Y+4	; 0x04
     5b2:	3d 81       	ldd	r19, Y+5	; 0x05
     5b4:	2a 30       	cpi	r18, 0x0A	; 10
     5b6:	31 05       	cpc	r19, r1
     5b8:	81 f0       	breq	.+32     	; 0x5da <DIO_u8SetPortVal+0x6a>
     5ba:	8c 81       	ldd	r24, Y+4	; 0x04
     5bc:	9d 81       	ldd	r25, Y+5	; 0x05
     5be:	8b 30       	cpi	r24, 0x0B	; 11
     5c0:	91 05       	cpc	r25, r1
     5c2:	81 f0       	breq	.+32     	; 0x5e4 <DIO_u8SetPortVal+0x74>
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
     5c6:	eb e3       	ldi	r30, 0x3B	; 59
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	80 83       	st	Z, r24
     5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
     5d0:	e8 e3       	ldi	r30, 0x38	; 56
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	80 83       	st	Z, r24
     5d8:	0c c0       	rjmp	.+24     	; 0x5f2 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
     5da:	e5 e3       	ldi	r30, 0x35	; 53
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	80 83       	st	Z, r24
     5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
     5e4:	e2 e3       	ldi	r30, 0x32	; 50
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	80 83       	st	Z, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	cf 91       	pop	r28
     600:	df 91       	pop	r29
     602:	08 95       	ret

00000604 <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
     604:	df 93       	push	r29
     606:	cf 93       	push	r28
     608:	00 d0       	rcall	.+0      	; 0x60a <DIO_u8SetPortDir+0x6>
     60a:	00 d0       	rcall	.+0      	; 0x60c <DIO_u8SetPortDir+0x8>
     60c:	0f 92       	push	r0
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	8a 83       	std	Y+2, r24	; 0x02
     614:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	28 2f       	mov	r18, r24
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	3d 83       	std	Y+5, r19	; 0x05
     622:	2c 83       	std	Y+4, r18	; 0x04
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	89 30       	cpi	r24, 0x09	; 9
     62a:	91 05       	cpc	r25, r1
     62c:	d9 f0       	breq	.+54     	; 0x664 <DIO_u8SetPortDir+0x60>
     62e:	2c 81       	ldd	r18, Y+4	; 0x04
     630:	3d 81       	ldd	r19, Y+5	; 0x05
     632:	2a 30       	cpi	r18, 0x0A	; 10
     634:	31 05       	cpc	r19, r1
     636:	34 f4       	brge	.+12     	; 0x644 <DIO_u8SetPortDir+0x40>
     638:	8c 81       	ldd	r24, Y+4	; 0x04
     63a:	9d 81       	ldd	r25, Y+5	; 0x05
     63c:	88 30       	cpi	r24, 0x08	; 8
     63e:	91 05       	cpc	r25, r1
     640:	61 f0       	breq	.+24     	; 0x65a <DIO_u8SetPortDir+0x56>
     642:	1f c0       	rjmp	.+62     	; 0x682 <DIO_u8SetPortDir+0x7e>
     644:	2c 81       	ldd	r18, Y+4	; 0x04
     646:	3d 81       	ldd	r19, Y+5	; 0x05
     648:	2a 30       	cpi	r18, 0x0A	; 10
     64a:	31 05       	cpc	r19, r1
     64c:	81 f0       	breq	.+32     	; 0x66e <DIO_u8SetPortDir+0x6a>
     64e:	8c 81       	ldd	r24, Y+4	; 0x04
     650:	9d 81       	ldd	r25, Y+5	; 0x05
     652:	8b 30       	cpi	r24, 0x0B	; 11
     654:	91 05       	cpc	r25, r1
     656:	81 f0       	breq	.+32     	; 0x678 <DIO_u8SetPortDir+0x74>
     658:	14 c0       	rjmp	.+40     	; 0x682 <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
     65a:	ea e3       	ldi	r30, 0x3A	; 58
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	80 83       	st	Z, r24
     662:	11 c0       	rjmp	.+34     	; 0x686 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
     664:	e7 e3       	ldi	r30, 0x37	; 55
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	80 83       	st	Z, r24
     66c:	0c c0       	rjmp	.+24     	; 0x686 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
     66e:	e4 e3       	ldi	r30, 0x34	; 52
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	80 83       	st	Z, r24
     676:	07 c0       	rjmp	.+14     	; 0x686 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
     678:	e1 e3       	ldi	r30, 0x31	; 49
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	80 83       	st	Z, r24
     680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     682:	83 e0       	ldi	r24, 0x03	; 3
     684:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     686:	89 81       	ldd	r24, Y+1	; 0x01
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	08 95       	ret

00000698 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
     698:	df 93       	push	r29
     69a:	cf 93       	push	r28
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	27 97       	sbiw	r28, 0x07	; 7
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	8a 83       	std	Y+2, r24	; 0x02
     6ae:	6b 83       	std	Y+3, r22	; 0x03
     6b0:	5d 83       	std	Y+5, r21	; 0x05
     6b2:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	88 30       	cpi	r24, 0x08	; 8
     6bc:	08 f0       	brcs	.+2      	; 0x6c0 <DIO_u8GetPinVal+0x28>
     6be:	74 c0       	rjmp	.+232    	; 0x7a8 <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	3f 83       	std	Y+7, r19	; 0x07
     6c8:	2e 83       	std	Y+6, r18	; 0x06
     6ca:	4e 81       	ldd	r20, Y+6	; 0x06
     6cc:	5f 81       	ldd	r21, Y+7	; 0x07
     6ce:	49 30       	cpi	r20, 0x09	; 9
     6d0:	51 05       	cpc	r21, r1
     6d2:	59 f1       	breq	.+86     	; 0x72a <DIO_u8GetPinVal+0x92>
     6d4:	8e 81       	ldd	r24, Y+6	; 0x06
     6d6:	9f 81       	ldd	r25, Y+7	; 0x07
     6d8:	8a 30       	cpi	r24, 0x0A	; 10
     6da:	91 05       	cpc	r25, r1
     6dc:	34 f4       	brge	.+12     	; 0x6ea <DIO_u8GetPinVal+0x52>
     6de:	2e 81       	ldd	r18, Y+6	; 0x06
     6e0:	3f 81       	ldd	r19, Y+7	; 0x07
     6e2:	28 30       	cpi	r18, 0x08	; 8
     6e4:	31 05       	cpc	r19, r1
     6e6:	69 f0       	breq	.+26     	; 0x702 <DIO_u8GetPinVal+0x6a>
     6e8:	5c c0       	rjmp	.+184    	; 0x7a2 <DIO_u8GetPinVal+0x10a>
     6ea:	4e 81       	ldd	r20, Y+6	; 0x06
     6ec:	5f 81       	ldd	r21, Y+7	; 0x07
     6ee:	4a 30       	cpi	r20, 0x0A	; 10
     6f0:	51 05       	cpc	r21, r1
     6f2:	79 f1       	breq	.+94     	; 0x752 <DIO_u8GetPinVal+0xba>
     6f4:	8e 81       	ldd	r24, Y+6	; 0x06
     6f6:	9f 81       	ldd	r25, Y+7	; 0x07
     6f8:	8b 30       	cpi	r24, 0x0B	; 11
     6fa:	91 05       	cpc	r25, r1
     6fc:	09 f4       	brne	.+2      	; 0x700 <DIO_u8GetPinVal+0x68>
     6fe:	3d c0       	rjmp	.+122    	; 0x77a <DIO_u8GetPinVal+0xe2>
     700:	50 c0       	rjmp	.+160    	; 0x7a2 <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
     702:	e9 e3       	ldi	r30, 0x39	; 57
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8GetPinVal+0x82>
     716:	55 95       	asr	r21
     718:	47 95       	ror	r20
     71a:	8a 95       	dec	r24
     71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8GetPinVal+0x7e>
     71e:	ca 01       	movw	r24, r20
     720:	81 70       	andi	r24, 0x01	; 1
     722:	ec 81       	ldd	r30, Y+4	; 0x04
     724:	fd 81       	ldd	r31, Y+5	; 0x05
     726:	80 83       	st	Z, r24
     728:	41 c0       	rjmp	.+130    	; 0x7ac <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
     72a:	e6 e3       	ldi	r30, 0x36	; 54
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_u8GetPinVal+0xaa>
     73e:	55 95       	asr	r21
     740:	47 95       	ror	r20
     742:	8a 95       	dec	r24
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_u8GetPinVal+0xa6>
     746:	ca 01       	movw	r24, r20
     748:	81 70       	andi	r24, 0x01	; 1
     74a:	ec 81       	ldd	r30, Y+4	; 0x04
     74c:	fd 81       	ldd	r31, Y+5	; 0x05
     74e:	80 83       	st	Z, r24
     750:	2d c0       	rjmp	.+90     	; 0x7ac <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
     752:	e3 e3       	ldi	r30, 0x33	; 51
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_u8GetPinVal+0xd2>
     766:	55 95       	asr	r21
     768:	47 95       	ror	r20
     76a:	8a 95       	dec	r24
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_u8GetPinVal+0xce>
     76e:	ca 01       	movw	r24, r20
     770:	81 70       	andi	r24, 0x01	; 1
     772:	ec 81       	ldd	r30, Y+4	; 0x04
     774:	fd 81       	ldd	r31, Y+5	; 0x05
     776:	80 83       	st	Z, r24
     778:	19 c0       	rjmp	.+50     	; 0x7ac <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
     77a:	e0 e3       	ldi	r30, 0x30	; 48
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	28 2f       	mov	r18, r24
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	88 2f       	mov	r24, r24
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a9 01       	movw	r20, r18
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_u8GetPinVal+0xfa>
     78e:	55 95       	asr	r21
     790:	47 95       	ror	r20
     792:	8a 95       	dec	r24
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_u8GetPinVal+0xf6>
     796:	ca 01       	movw	r24, r20
     798:	81 70       	andi	r24, 0x01	; 1
     79a:	ec 81       	ldd	r30, Y+4	; 0x04
     79c:	fd 81       	ldd	r31, Y+5	; 0x05
     79e:	80 83       	st	Z, r24
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ae:	27 96       	adiw	r28, 0x07	; 7
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <DIO_u8GetPortVal+0x6>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <DIO_u8GetPortVal+0x8>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <DIO_u8GetPortVal+0xa>
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	8a 83       	std	Y+2, r24	; 0x02
     7d0:	7c 83       	std	Y+4, r23	; 0x04
     7d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	28 2f       	mov	r18, r24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	3e 83       	std	Y+6, r19	; 0x06
     7e0:	2d 83       	std	Y+5, r18	; 0x05
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	89 30       	cpi	r24, 0x09	; 9
     7e8:	91 05       	cpc	r25, r1
     7ea:	e9 f0       	breq	.+58     	; 0x826 <DIO_u8GetPortVal+0x66>
     7ec:	2d 81       	ldd	r18, Y+5	; 0x05
     7ee:	3e 81       	ldd	r19, Y+6	; 0x06
     7f0:	2a 30       	cpi	r18, 0x0A	; 10
     7f2:	31 05       	cpc	r19, r1
     7f4:	34 f4       	brge	.+12     	; 0x802 <DIO_u8GetPortVal+0x42>
     7f6:	8d 81       	ldd	r24, Y+5	; 0x05
     7f8:	9e 81       	ldd	r25, Y+6	; 0x06
     7fa:	88 30       	cpi	r24, 0x08	; 8
     7fc:	91 05       	cpc	r25, r1
     7fe:	61 f0       	breq	.+24     	; 0x818 <DIO_u8GetPortVal+0x58>
     800:	27 c0       	rjmp	.+78     	; 0x850 <DIO_u8GetPortVal+0x90>
     802:	2d 81       	ldd	r18, Y+5	; 0x05
     804:	3e 81       	ldd	r19, Y+6	; 0x06
     806:	2a 30       	cpi	r18, 0x0A	; 10
     808:	31 05       	cpc	r19, r1
     80a:	a1 f0       	breq	.+40     	; 0x834 <DIO_u8GetPortVal+0x74>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	9e 81       	ldd	r25, Y+6	; 0x06
     810:	8b 30       	cpi	r24, 0x0B	; 11
     812:	91 05       	cpc	r25, r1
     814:	b1 f0       	breq	.+44     	; 0x842 <DIO_u8GetPortVal+0x82>
     816:	1c c0       	rjmp	.+56     	; 0x850 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
     818:	e9 e3       	ldi	r30, 0x39	; 57
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	eb 81       	ldd	r30, Y+3	; 0x03
     820:	fc 81       	ldd	r31, Y+4	; 0x04
     822:	80 83       	st	Z, r24
     824:	17 c0       	rjmp	.+46     	; 0x854 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
     826:	e6 e3       	ldi	r30, 0x36	; 54
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	eb 81       	ldd	r30, Y+3	; 0x03
     82e:	fc 81       	ldd	r31, Y+4	; 0x04
     830:	80 83       	st	Z, r24
     832:	10 c0       	rjmp	.+32     	; 0x854 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
     834:	e3 e3       	ldi	r30, 0x33	; 51
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	eb 81       	ldd	r30, Y+3	; 0x03
     83c:	fc 81       	ldd	r31, Y+4	; 0x04
     83e:	80 83       	st	Z, r24
     840:	09 c0       	rjmp	.+18     	; 0x854 <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
     842:	e0 e3       	ldi	r30, 0x30	; 48
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	eb 81       	ldd	r30, Y+3	; 0x03
     84a:	fc 81       	ldd	r31, Y+4	; 0x04
     84c:	80 83       	st	Z, r24
     84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
     850:	83 e0       	ldi	r24, 0x03	; 3
     852:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
     854:	89 81       	ldd	r24, Y+1	; 0x01
}
     856:	26 96       	adiw	r28, 0x06	; 6
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	00 d0       	rcall	.+0      	; 0x86e <DIO_u8TogPinVal+0x6>
     86e:	00 d0       	rcall	.+0      	; 0x870 <DIO_u8TogPinVal+0x8>
     870:	0f 92       	push	r0
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     87e:	8b 81       	ldd	r24, Y+3	; 0x03
     880:	88 30       	cpi	r24, 0x08	; 8
     882:	08 f0       	brcs	.+2      	; 0x886 <DIO_u8TogPinVal+0x1e>
     884:	73 c0       	rjmp	.+230    	; 0x96c <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	28 2f       	mov	r18, r24
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	3d 83       	std	Y+5, r19	; 0x05
     88e:	2c 83       	std	Y+4, r18	; 0x04
     890:	8c 81       	ldd	r24, Y+4	; 0x04
     892:	9d 81       	ldd	r25, Y+5	; 0x05
     894:	89 30       	cpi	r24, 0x09	; 9
     896:	91 05       	cpc	r25, r1
     898:	51 f1       	breq	.+84     	; 0x8ee <DIO_u8TogPinVal+0x86>
     89a:	2c 81       	ldd	r18, Y+4	; 0x04
     89c:	3d 81       	ldd	r19, Y+5	; 0x05
     89e:	2a 30       	cpi	r18, 0x0A	; 10
     8a0:	31 05       	cpc	r19, r1
     8a2:	34 f4       	brge	.+12     	; 0x8b0 <DIO_u8TogPinVal+0x48>
     8a4:	8c 81       	ldd	r24, Y+4	; 0x04
     8a6:	9d 81       	ldd	r25, Y+5	; 0x05
     8a8:	88 30       	cpi	r24, 0x08	; 8
     8aa:	91 05       	cpc	r25, r1
     8ac:	61 f0       	breq	.+24     	; 0x8c6 <DIO_u8TogPinVal+0x5e>
     8ae:	5b c0       	rjmp	.+182    	; 0x966 <DIO_u8TogPinVal+0xfe>
     8b0:	2c 81       	ldd	r18, Y+4	; 0x04
     8b2:	3d 81       	ldd	r19, Y+5	; 0x05
     8b4:	2a 30       	cpi	r18, 0x0A	; 10
     8b6:	31 05       	cpc	r19, r1
     8b8:	71 f1       	breq	.+92     	; 0x916 <DIO_u8TogPinVal+0xae>
     8ba:	8c 81       	ldd	r24, Y+4	; 0x04
     8bc:	9d 81       	ldd	r25, Y+5	; 0x05
     8be:	8b 30       	cpi	r24, 0x0B	; 11
     8c0:	91 05       	cpc	r25, r1
     8c2:	e9 f1       	breq	.+122    	; 0x93e <DIO_u8TogPinVal+0xd6>
     8c4:	50 c0       	rjmp	.+160    	; 0x966 <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
     8c6:	ab e3       	ldi	r26, 0x3B	; 59
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	eb e3       	ldi	r30, 0x3B	; 59
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	48 2f       	mov	r20, r24
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 2e       	mov	r0, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <DIO_u8TogPinVal+0x7c>
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	0a 94       	dec	r0
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <DIO_u8TogPinVal+0x78>
     8e8:	84 27       	eor	r24, r20
     8ea:	8c 93       	st	X, r24
     8ec:	41 c0       	rjmp	.+130    	; 0x970 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
     8ee:	a8 e3       	ldi	r26, 0x38	; 56
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e8 e3       	ldi	r30, 0x38	; 56
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	48 2f       	mov	r20, r24
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	28 2f       	mov	r18, r24
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	02 2e       	mov	r0, r18
     906:	02 c0       	rjmp	.+4      	; 0x90c <DIO_u8TogPinVal+0xa4>
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	0a 94       	dec	r0
     90e:	e2 f7       	brpl	.-8      	; 0x908 <DIO_u8TogPinVal+0xa0>
     910:	84 27       	eor	r24, r20
     912:	8c 93       	st	X, r24
     914:	2d c0       	rjmp	.+90     	; 0x970 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
     916:	a5 e3       	ldi	r26, 0x35	; 53
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e5 e3       	ldi	r30, 0x35	; 53
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	48 2f       	mov	r20, r24
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	28 2f       	mov	r18, r24
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	02 2e       	mov	r0, r18
     92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_u8TogPinVal+0xcc>
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_u8TogPinVal+0xc8>
     938:	84 27       	eor	r24, r20
     93a:	8c 93       	st	X, r24
     93c:	19 c0       	rjmp	.+50     	; 0x970 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
     93e:	a2 e3       	ldi	r26, 0x32	; 50
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	e2 e3       	ldi	r30, 0x32	; 50
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	48 2f       	mov	r20, r24
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	28 2f       	mov	r18, r24
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_u8TogPinVal+0xf4>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_u8TogPinVal+0xf0>
     960:	84 27       	eor	r24, r20
     962:	8c 93       	st	X, r24
     964:	05 c0       	rjmp	.+10     	; 0x970 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     970:	89 81       	ldd	r24, Y+1	; 0x01
}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
     98a:	a0 e5       	ldi	r26, 0x50	; 80
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	e0 e5       	ldi	r30, 0x50	; 80
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	84 60       	ori	r24, 0x04	; 4
     996:	8c 93       	st	X, r24
}
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	08 95       	ret

0000099e <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
     9a6:	a0 e5       	ldi	r26, 0x50	; 80
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e0 e5       	ldi	r30, 0x50	; 80
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	8b 7f       	andi	r24, 0xFB	; 251
     9b2:	8c 93       	st	X, r24
}
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <LED_voidInit>:
#include "primitive_data_types.h"
#include "dio_interface.h"
#include "led_interface.h"

void LED_voidInit(void)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED0,u8_DIO_OUTPUT_PIN)          ;
     9c2:	89 e0       	ldi	r24, 0x09	; 9
     9c4:	64 e0       	ldi	r22, 0x04	; 4
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED1,u8_DIO_OUTPUT_PIN)          ;
     9cc:	89 e0       	ldi	r24, 0x09	; 9
     9ce:	65 e0       	ldi	r22, 0x05	; 5
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED2,u8_DIO_OUTPUT_PIN)          ;
     9d6:	89 e0       	ldi	r24, 0x09	; 9
     9d8:	66 e0       	ldi	r22, 0x06	; 6
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED3,u8_DIO_OUTPUT_PIN)          ;
     9e0:	89 e0       	ldi	r24, 0x09	; 9
     9e2:	67 e0       	ldi	r22, 0x07	; 7
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPinDir>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED0,u8_DIO_PIN_LOW)          ;
     9ea:	89 e0       	ldi	r24, 0x09	; 9
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED1,u8_DIO_PIN_LOW)          ;
     9f4:	89 e0       	ldi	r24, 0x09	; 9
     9f6:	65 e0       	ldi	r22, 0x05	; 5
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED2,u8_DIO_PIN_LOW)          ;
     9fe:	89 e0       	ldi	r24, 0x09	; 9
     a00:	66 e0       	ldi	r22, 0x06	; 6
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED3,u8_DIO_PIN_LOW)          ;
     a08:	89 e0       	ldi	r24, 0x09	; 9
     a0a:	67 e0       	ldi	r22, 0x07	; 7
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>


}
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	08 95       	ret

00000a18 <LED_u8On>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8On(uint8_t u8_LedNum) 
{
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <LED_u8On+0x6>
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	88 30       	cpi	r24, 0x08	; 8
     a2c:	48 f4       	brcc	.+18     	; 0xa40 <LED_u8On+0x28>
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	30 f0       	brcs	.+12     	; 0xa40 <LED_u8On+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_ON)    ;  
     a34:	89 e0       	ldi	r24, 0x09	; 9
     a36:	6a 81       	ldd	r22, Y+2	; 0x02
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <LED_u8On+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     a40:	85 e0       	ldi	r24, 0x05	; 5
     a42:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     a44:	89 81       	ldd	r24, Y+1	; 0x01

}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <LED_u8Off>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Off(uint8_t u8_LedNum)  
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	00 d0       	rcall	.+0      	; 0xa56 <LED_u8Off+0x6>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     a5c:	84 e0       	ldi	r24, 0x04	; 4
     a5e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	88 30       	cpi	r24, 0x08	; 8
     a64:	48 f4       	brcc	.+18     	; 0xa78 <LED_u8Off+0x28>
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	30 f0       	brcs	.+12     	; 0xa78 <LED_u8Off+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_OFF)    ;  
     a6c:	89 e0       	ldi	r24, 0x09	; 9
     a6e:	6a 81       	ldd	r22, Y+2	; 0x02
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	0e 94 a4 00 	call	0x148	; 0x148 <DIO_u8SetPinVal>
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <LED_u8Off+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     a78:	85 e0       	ldi	r24, 0x05	; 5
     a7a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     a7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <LED_u8Tog>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Tog(uint8_t u8_LedNum)  
{
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <LED_u8Tog+0x6>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	88 30       	cpi	r24, 0x08	; 8
     a9c:	40 f4       	brcc	.+16     	; 0xaae <LED_u8Tog+0x26>
     a9e:	8a 81       	ldd	r24, Y+2	; 0x02
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	28 f0       	brcs	.+10     	; 0xaae <LED_u8Tog+0x26>
	{ 
		DIO_u8TogPinVal(u8_LED_PORT,u8_LedNum)    ;  
     aa4:	89 e0       	ldi	r24, 0x09	; 9
     aa6:	6a 81       	ldd	r22, Y+2	; 0x02
     aa8:	0e 94 34 04 	call	0x868	; 0x868 <DIO_u8TogPinVal>
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <LED_u8Tog+0x2a>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     ab2:	89 81       	ldd	r24, Y+1	; 0x01

}
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	cf 91       	pop	r28
     aba:	df 91       	pop	r29
     abc:	08 95       	ret

00000abe <main>:


#define u8_NOT_PRESSED_YET		0
#define u8_INTIAL_BUTTON_VAL	5
int main()
{
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <main+0x6>
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_NewButtonVal = u8_INTIAL_BUTTON_VAL ;
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_PrevButtonVal= u8_INTIAL_BUTTON_VAL ;
     acc:	85 e0       	ldi	r24, 0x05	; 5
     ace:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidInit() ;
     ad0:	0e 94 85 05 	call	0xb0a	; 0xb0a <TIMERS_voidInit>
	BUTTONS_voidInit() ;
     ad4:	0e 94 49 00 	call	0x92	; 0x92 <BUTTONS_voidInit>
	LED_voidInit() ;
     ad8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LED_voidInit>
	BUTTONS_u8PullUpEn(u8_BUTTON2) ;
     adc:	8b e0       	ldi	r24, 0x0B	; 11
     ade:	0e 94 89 00 	call	0x112	; 0x112 <BUTTONS_u8PullUpEn>

	while(1)
	{
		BUTTONS_u8GetRead(u8_BUTTON2,&u8_NewButtonVal) ;
     ae2:	9e 01       	movw	r18, r28
     ae4:	2e 5f       	subi	r18, 0xFE	; 254
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	8b e0       	ldi	r24, 0x0B	; 11
     aea:	b9 01       	movw	r22, r18
     aec:	0e 94 5f 00 	call	0xbe	; 0xbe <BUTTONS_u8GetRead>

		if(u8_NewButtonVal==u8_BUTTON_PRESSED && u8_PrevButtonVal!=u8_NewButtonVal)
     af0:	8a 81       	ldd	r24, Y+2	; 0x02
     af2:	88 23       	and	r24, r24
     af4:	39 f4       	brne	.+14     	; 0xb04 <main+0x46>
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	89 17       	cp	r24, r25
     afc:	19 f0       	breq	.+6      	; 0xb04 <main+0x46>
		{
			LED_u8Tog(u8_LED0) ;
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	0e 94 44 05 	call	0xa88	; 0xa88 <LED_u8Tog>
		}
		u8_PrevButtonVal = u8_NewButtonVal ;
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	ec cf       	rjmp	.-40     	; 0xae2 <main+0x24>

00000b0a <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     b12:	a3 e5       	ldi	r26, 0x53	; 83
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e3 e5       	ldi	r30, 0x53	; 83
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7b       	andi	r24, 0xBF	; 191
     b1e:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     b20:	a3 e5       	ldi	r26, 0x53	; 83
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e3 e5       	ldi	r30, 0x53	; 83
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	87 7f       	andi	r24, 0xF7	; 247
     b2c:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     b2e:	a3 e5       	ldi	r26, 0x53	; 83
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	e3 e5       	ldi	r30, 0x53	; 83
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8f 77       	andi	r24, 0x7F	; 127
     b3a:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     b3c:	a3 e5       	ldi	r26, 0x53	; 83
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e3 e5       	ldi	r30, 0x53	; 83
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8f 7d       	andi	r24, 0xDF	; 223
     b48:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     b4a:	a3 e5       	ldi	r26, 0x53	; 83
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e3 e5       	ldi	r30, 0x53	; 83
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 7e       	andi	r24, 0xEF	; 239
     b56:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b58:	a3 e5       	ldi	r26, 0x53	; 83
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8b 7f       	andi	r24, 0xFB	; 251
     b64:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b66:	a3 e5       	ldi	r26, 0x53	; 83
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     b74:	a3 e5       	ldi	r26, 0x53	; 83
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e3 e5       	ldi	r30, 0x53	; 83
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	3c 83       	std	Y+4, r19	; 0x04
     ba2:	2b 83       	std	Y+3, r18	; 0x03
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	89 30       	cpi	r24, 0x09	; 9
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     bae:	6b c0       	rjmp	.+214    	; 0xc86 <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	2a 30       	cpi	r18, 0x0A	; 10
     bb6:	31 05       	cpc	r19, r1
     bb8:	8c f4       	brge	.+34     	; 0xbdc <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	87 30       	cpi	r24, 0x07	; 7
     bc0:	91 05       	cpc	r25, r1
     bc2:	a9 f1       	breq	.+106    	; 0xc2e <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     bc4:	2b 81       	ldd	r18, Y+3	; 0x03
     bc6:	3c 81       	ldd	r19, Y+4	; 0x04
     bc8:	28 30       	cpi	r18, 0x08	; 8
     bca:	31 05       	cpc	r19, r1
     bcc:	0c f0       	brlt	.+2      	; 0xbd0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     bce:	45 c0       	rjmp	.+138    	; 0xc5a <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	86 30       	cpi	r24, 0x06	; 6
     bd6:	91 05       	cpc	r25, r1
     bd8:	a1 f0       	breq	.+40     	; 0xc02 <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     bda:	ad c0       	rjmp	.+346    	; 0xd36 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	2b 30       	cpi	r18, 0x0B	; 11
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     be6:	7b c0       	rjmp	.+246    	; 0xcde <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	8b 30       	cpi	r24, 0x0B	; 11
     bee:	91 05       	cpc	r25, r1
     bf0:	0c f4       	brge	.+2      	; 0xbf4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     bf2:	5f c0       	rjmp	.+190    	; 0xcb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     bf4:	2b 81       	ldd	r18, Y+3	; 0x03
     bf6:	3c 81       	ldd	r19, Y+4	; 0x04
     bf8:	2c 30       	cpi	r18, 0x0C	; 12
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     bfe:	85 c0       	rjmp	.+266    	; 0xd0a <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     c00:	9a c0       	rjmp	.+308    	; 0xd36 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c02:	a3 e5       	ldi	r26, 0x53	; 83
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e3 e5       	ldi	r30, 0x53	; 83
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8b 7f       	andi	r24, 0xFB	; 251
     c0e:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c10:	a3 e5       	ldi	r26, 0x53	; 83
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e3 e5       	ldi	r30, 0x53	; 83
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c1e:	a3 e5       	ldi	r26, 0x53	; 83
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e3 e5       	ldi	r30, 0x53	; 83
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
     c2c:	85 c0       	rjmp	.+266    	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c3c:	a3 e5       	ldi	r26, 0x53	; 83
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e3 e5       	ldi	r30, 0x53	; 83
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c4a:	a3 e5       	ldi	r26, 0x53	; 83
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e3 e5       	ldi	r30, 0x53	; 83
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	8c 93       	st	X, r24
     c58:	6f c0       	rjmp	.+222    	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c5a:	a3 e5       	ldi	r26, 0x53	; 83
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e3 e5       	ldi	r30, 0x53	; 83
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8b 7f       	andi	r24, 0xFB	; 251
     c66:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c68:	a3 e5       	ldi	r26, 0x53	; 83
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e3 e5       	ldi	r30, 0x53	; 83
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c76:	a3 e5       	ldi	r26, 0x53	; 83
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e3 e5       	ldi	r30, 0x53	; 83
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	8c 93       	st	X, r24
     c84:	59 c0       	rjmp	.+178    	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c86:	a3 e5       	ldi	r26, 0x53	; 83
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e3 e5       	ldi	r30, 0x53	; 83
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c94:	a3 e5       	ldi	r26, 0x53	; 83
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e3 e5       	ldi	r30, 0x53	; 83
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8d 7f       	andi	r24, 0xFD	; 253
     ca0:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     ca2:	a3 e5       	ldi	r26, 0x53	; 83
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e3 e5       	ldi	r30, 0x53	; 83
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	8c 93       	st	X, r24
     cb0:	43 c0       	rjmp	.+134    	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     cb2:	a3 e5       	ldi	r26, 0x53	; 83
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	84 60       	ori	r24, 0x04	; 4
     cbe:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     cc0:	a3 e5       	ldi	r26, 0x53	; 83
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e3 e5       	ldi	r30, 0x53	; 83
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     cce:	a3 e5       	ldi	r26, 0x53	; 83
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e3 e5       	ldi	r30, 0x53	; 83
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8c 93       	st	X, r24
     cdc:	2d c0       	rjmp	.+90     	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
     d08:	17 c0       	rjmp	.+46     	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     d0a:	a3 e5       	ldi	r26, 0x53	; 83
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e3 e5       	ldi	r30, 0x53	; 83
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     d18:	a3 e5       	ldi	r26, 0x53	; 83
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e3 e5       	ldi	r30, 0x53	; 83
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     d26:	a3 e5       	ldi	r26, 0x53	; 83
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e3 e5       	ldi	r30, 0x53	; 83
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	8c 93       	st	X, r24
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     d36:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     d38:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     d50:	a3 e5       	ldi	r26, 0x53	; 83
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e3 e5       	ldi	r30, 0x53	; 83
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8b 7f       	andi	r24, 0xFB	; 251
     d5c:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     d5e:	a3 e5       	ldi	r26, 0x53	; 83
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e3 e5       	ldi	r30, 0x53	; 83
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8d 7f       	andi	r24, 0xFD	; 253
     d6a:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <TIMERS_u8ClearIntFlag+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <TIMERS_u8ClearIntFlag+0x8>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3c 83       	std	Y+4, r19	; 0x04
     d9a:	2b 83       	std	Y+3, r18	; 0x03
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	81 31       	cpi	r24, 0x11	; 17
     da2:	91 05       	cpc	r25, r1
     da4:	31 f0       	breq	.+12     	; 0xdb2 <TIMERS_u8ClearIntFlag+0x32>
     da6:	2b 81       	ldd	r18, Y+3	; 0x03
     da8:	3c 81       	ldd	r19, Y+4	; 0x04
     daa:	22 31       	cpi	r18, 0x12	; 18
     dac:	31 05       	cpc	r19, r1
     dae:	49 f0       	breq	.+18     	; 0xdc2 <TIMERS_u8ClearIntFlag+0x42>
     db0:	10 c0       	rjmp	.+32     	; 0xdd2 <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     db2:	a8 e5       	ldi	r26, 0x58	; 88
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e8 e5       	ldi	r30, 0x58	; 88
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	81 60       	ori	r24, 0x01	; 1
     dbe:	8c 93       	st	X, r24
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     dc2:	a8 e5       	ldi	r26, 0x58	; 88
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e5       	ldi	r30, 0x58	; 88
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	8c 93       	st	X, r24
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     dd2:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <TIMERS_u8GetIntFlag+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <TIMERS_u8GetIntFlag+0x8>
     dec:	00 d0       	rcall	.+0      	; 0xdee <TIMERS_u8GetIntFlag+0xa>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	7c 83       	std	Y+4, r23	; 0x04
     df6:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3e 83       	std	Y+6, r19	; 0x06
     e04:	2d 83       	std	Y+5, r18	; 0x05
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	81 31       	cpi	r24, 0x11	; 17
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <TIMERS_u8GetIntFlag+0x38>
     e10:	2d 81       	ldd	r18, Y+5	; 0x05
     e12:	3e 81       	ldd	r19, Y+6	; 0x06
     e14:	22 31       	cpi	r18, 0x12	; 18
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <TIMERS_u8GetIntFlag+0x48>
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     e1c:	e8 e5       	ldi	r30, 0x58	; 88
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	81 70       	andi	r24, 0x01	; 1
     e24:	eb 81       	ldd	r30, Y+3	; 0x03
     e26:	fc 81       	ldd	r31, Y+4	; 0x04
     e28:	80 83       	st	Z, r24
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     e2c:	e8 e5       	ldi	r30, 0x58	; 88
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	86 95       	lsr	r24
     e34:	81 70       	andi	r24, 0x01	; 1
     e36:	eb 81       	ldd	r30, Y+3	; 0x03
     e38:	fc 81       	ldd	r31, Y+4	; 0x04
     e3a:	80 83       	st	Z, r24
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     e3e:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     e40:	89 81       	ldd	r24, Y+1	; 0x01
}
     e42:	26 96       	adiw	r28, 0x06	; 6
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <TIMERS_u8IntModesEn+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <TIMERS_u8IntModesEn+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	3c 83       	std	Y+4, r19	; 0x04
     e6e:	2b 83       	std	Y+3, r18	; 0x03
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	81 31       	cpi	r24, 0x11	; 17
     e76:	91 05       	cpc	r25, r1
     e78:	31 f0       	breq	.+12     	; 0xe86 <TIMERS_u8IntModesEn+0x32>
     e7a:	2b 81       	ldd	r18, Y+3	; 0x03
     e7c:	3c 81       	ldd	r19, Y+4	; 0x04
     e7e:	22 31       	cpi	r18, 0x12	; 18
     e80:	31 05       	cpc	r19, r1
     e82:	81 f0       	breq	.+32     	; 0xea4 <TIMERS_u8IntModesEn+0x50>
     e84:	1e c0       	rjmp	.+60     	; 0xec2 <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     e86:	a8 e5       	ldi	r26, 0x58	; 88
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e5       	ldi	r30, 0x58	; 88
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     e94:	a9 e5       	ldi	r26, 0x59	; 89
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e9 e5       	ldi	r30, 0x59	; 89
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	81 60       	ori	r24, 0x01	; 1
     ea0:	8c 93       	st	X, r24
     ea2:	10 c0       	rjmp	.+32     	; 0xec4 <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     ea4:	a8 e5       	ldi	r26, 0x58	; 88
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e8 e5       	ldi	r30, 0x58	; 88
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     eb2:	a9 e5       	ldi	r26, 0x59	; 89
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e9 e5       	ldi	r30, 0x59	; 89
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	82 60       	ori	r24, 0x02	; 2
     ebe:	8c 93       	st	X, r24
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     ec2:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <TIMERS_u8IntModesDis+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <TIMERS_u8IntModesDis+0x8>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3c 83       	std	Y+4, r19	; 0x04
     eee:	2b 83       	std	Y+3, r18	; 0x03
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	81 31       	cpi	r24, 0x11	; 17
     ef6:	91 05       	cpc	r25, r1
     ef8:	31 f0       	breq	.+12     	; 0xf06 <TIMERS_u8IntModesDis+0x32>
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	22 31       	cpi	r18, 0x12	; 18
     f00:	31 05       	cpc	r19, r1
     f02:	49 f0       	breq	.+18     	; 0xf16 <TIMERS_u8IntModesDis+0x42>
     f04:	10 c0       	rjmp	.+32     	; 0xf26 <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     f06:	a9 e5       	ldi	r26, 0x59	; 89
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 e5       	ldi	r30, 0x59	; 89
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	8c 93       	st	X, r24
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     f16:	a9 e5       	ldi	r26, 0x59	; 89
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e9 e5       	ldi	r30, 0x59	; 89
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8d 7f       	andi	r24, 0xFD	; 253
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     f26:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	80 95       	com	r24
     f4e:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     f50:	e2 e5       	ldi	r30, 0x52	; 82
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     f76:	ec e5       	ldi	r30, 0x5C	; 92
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <TIMER0_u8setCallBack+0x6>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <TIMER0_u8setCallBack+0x8>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <TIMER0_u8setCallBack+0xa>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	8a 83       	std	Y+2, r24	; 0x02
     f9a:	7c 83       	std	Y+4, r23	; 0x04
     f9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	01 f1       	breq	.+64     	; 0xfea <TIMER0_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3e 83       	std	Y+6, r19	; 0x06
     fb2:	2d 83       	std	Y+5, r18	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	81 31       	cpi	r24, 0x11	; 17
     fba:	91 05       	cpc	r25, r1
     fbc:	31 f0       	breq	.+12     	; 0xfca <TIMER0_u8setCallBack+0x40>
     fbe:	2d 81       	ldd	r18, Y+5	; 0x05
     fc0:	3e 81       	ldd	r19, Y+6	; 0x06
     fc2:	22 31       	cpi	r18, 0x12	; 18
     fc4:	31 05       	cpc	r19, r1
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <TIMER0_u8setCallBack+0x4e>
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <TIMER0_u8setCallBack+0x5c>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	9c 81       	ldd	r25, Y+4	; 0x04
     fce:	90 93 6d 00 	sts	0x006D, r25
     fd2:	80 93 6c 00 	sts	0x006C, r24
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <TIMER0_u8setCallBack+0x62>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	90 93 6b 00 	sts	0x006B, r25
     fe0:	80 93 6a 00 	sts	0x006A, r24
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <TIMER0_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <TIMER0_u8setCallBack+0x62>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     fea:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
    102a:	80 91 6a 00 	lds	r24, 0x006A
    102e:	90 91 6b 00 	lds	r25, 0x006B
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	29 f0       	breq	.+10     	; 0x1040 <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
    1036:	e0 91 6a 00 	lds	r30, 0x006A
    103a:	f0 91 6b 00 	lds	r31, 0x006B
    103e:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
    1090:	80 91 6c 00 	lds	r24, 0x006C
    1094:	90 91 6d 00 	lds	r25, 0x006D
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
    109c:	e0 91 6c 00 	lds	r30, 0x006C
    10a0:	f0 91 6d 00 	lds	r31, 0x006D
    10a4:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <TIMER0_u8BusyWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWait(uint32_t u32_BusyTimeInMilliSec)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	c9 54       	subi	r28, 0x49	; 73
    10da:	d0 40       	sbci	r29, 0x00	; 0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	6b 87       	std	Y+11, r22	; 0x0b
    10e8:	7c 87       	std	Y+12, r23	; 0x0c
    10ea:	8d 87       	std	Y+13, r24	; 0x0d
    10ec:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    10ee:	83 e1       	ldi	r24, 0x13	; 19
    10f0:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
    10f2:	80 91 61 00 	lds	r24, 0x0061
    10f6:	83 31       	cpi	r24, 0x13	; 19
    10f8:	09 f0       	breq	.+2      	; 0x10fc <TIMER0_u8BusyWait+0x30>
    10fa:	c5 c1       	rjmp	.+906    	; 0x1486 <TIMER0_u8BusyWait+0x3ba>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    10fc:	88 e1       	ldi	r24, 0x18	; 24
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	1b 82       	std	Y+3, r1	; 0x03
    1102:	1c 82       	std	Y+4, r1	; 0x04
    1104:	1d 82       	std	Y+5, r1	; 0x05
    1106:	1e 82       	std	Y+6, r1	; 0x06
    1108:	1f 82       	std	Y+7, r1	; 0x07
    110a:	18 86       	std	Y+8, r1	; 0x08
    110c:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    110e:	81 e1       	ldi	r24, 0x11	; 17
    1110:	0e 94 6a 07 	call	0xed4	; 0xed4 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    1114:	82 e1       	ldi	r24, 0x12	; 18
    1116:	0e 94 6a 07 	call	0xed4	; 0xed4 <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    111a:	87 e0       	ldi	r24, 0x07	; 7
    111c:	0e 94 c4 05 	call	0xb88	; 0xb88 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    1120:	82 e1       	ldi	r24, 0x12	; 18
    1122:	0e 94 c0 06 	call	0xd80	; 0xd80 <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1126:	8a ef       	ldi	r24, 0xFA	; 250
    1128:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	0e 94 9c 07 	call	0xf38	; 0xf38 <Timer0_u8setOverFlowRegTicksBeforeOV>
    1132:	3a c1       	rjmp	.+628    	; 0x13a8 <TIMER0_u8BusyWait+0x2dc>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
    1134:	9e 01       	movw	r18, r28
    1136:	26 5f       	subi	r18, 0xF6	; 246
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	82 e1       	ldi	r24, 0x12	; 18
    113c:	b9 01       	movw	r22, r18
    113e:	0e 94 f2 06 	call	0xde4	; 0xde4 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	09 f0       	breq	.+2      	; 0x114a <TIMER0_u8BusyWait+0x7e>
    1148:	2f c1       	rjmp	.+606    	; 0x13a8 <TIMER0_u8BusyWait+0x2dc>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    114a:	82 e1       	ldi	r24, 0x12	; 18
    114c:	0e 94 c0 06 	call	0xd80	; 0xd80 <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
    1150:	0a 81       	ldd	r16, Y+2	; 0x02
    1152:	0f 8f       	std	Y+31, r16	; 0x1f
    1154:	1b 81       	ldd	r17, Y+3	; 0x03
    1156:	18 a3       	std	Y+32, r17	; 0x20
    1158:	2c 81       	ldd	r18, Y+4	; 0x04
    115a:	29 a3       	std	Y+33, r18	; 0x21
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	3a a3       	std	Y+34, r19	; 0x22
    1160:	4e 81       	ldd	r20, Y+6	; 0x06
    1162:	4b a3       	std	Y+35, r20	; 0x23
    1164:	5f 81       	ldd	r21, Y+7	; 0x07
    1166:	5c a3       	std	Y+36, r21	; 0x24
    1168:	68 85       	ldd	r22, Y+8	; 0x08
    116a:	6d a3       	std	Y+37, r22	; 0x25
    116c:	79 85       	ldd	r23, Y+9	; 0x09
    116e:	7e a3       	std	Y+38, r23	; 0x26
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	8f a3       	std	Y+39, r24	; 0x27
    1174:	18 a6       	std	Y+40, r1	; 0x28
    1176:	19 a6       	std	Y+41, r1	; 0x29
    1178:	1a a6       	std	Y+42, r1	; 0x2a
    117a:	1b a6       	std	Y+43, r1	; 0x2b
    117c:	1c a6       	std	Y+44, r1	; 0x2c
    117e:	1d a6       	std	Y+45, r1	; 0x2d
    1180:	1e a6       	std	Y+46, r1	; 0x2e
    1182:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1184:	0f a1       	ldd	r16, Y+39	; 0x27
    1186:	90 0f       	add	r25, r16
    1188:	9f a7       	std	Y+47, r25	; 0x2f
    118a:	11 e0       	ldi	r17, 0x01	; 1
    118c:	1f ab       	std	Y+55, r17	; 0x37
    118e:	2f a5       	ldd	r18, Y+47	; 0x2f
    1190:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1192:	23 17       	cp	r18, r19
    1194:	08 f0       	brcs	.+2      	; 0x1198 <TIMER0_u8BusyWait+0xcc>
    1196:	1f aa       	std	Y+55, r1	; 0x37
    1198:	48 a1       	ldd	r20, Y+32	; 0x20
    119a:	58 a5       	ldd	r21, Y+40	; 0x28
    119c:	45 0f       	add	r20, r21
    119e:	48 ab       	std	Y+48, r20	; 0x30
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	68 af       	std	Y+56, r22	; 0x38
    11a4:	78 a9       	ldd	r23, Y+48	; 0x30
    11a6:	88 a1       	ldd	r24, Y+32	; 0x20
    11a8:	78 17       	cp	r23, r24
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <TIMER0_u8BusyWait+0xe2>
    11ac:	18 ae       	std	Y+56, r1	; 0x38
    11ae:	9f a9       	ldd	r25, Y+55	; 0x37
    11b0:	08 a9       	ldd	r16, Y+48	; 0x30
    11b2:	90 0f       	add	r25, r16
    11b4:	99 af       	std	Y+57, r25	; 0x39
    11b6:	11 e0       	ldi	r17, 0x01	; 1
    11b8:	1a af       	std	Y+58, r17	; 0x3a
    11ba:	29 ad       	ldd	r18, Y+57	; 0x39
    11bc:	38 a9       	ldd	r19, Y+48	; 0x30
    11be:	23 17       	cp	r18, r19
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <TIMER0_u8BusyWait+0xf8>
    11c2:	1a ae       	std	Y+58, r1	; 0x3a
    11c4:	48 ad       	ldd	r20, Y+56	; 0x38
    11c6:	5a ad       	ldd	r21, Y+58	; 0x3a
    11c8:	45 2b       	or	r20, r21
    11ca:	48 af       	std	Y+56, r20	; 0x38
    11cc:	69 ad       	ldd	r22, Y+57	; 0x39
    11ce:	68 ab       	std	Y+48, r22	; 0x30
    11d0:	79 a1       	ldd	r23, Y+33	; 0x21
    11d2:	89 a5       	ldd	r24, Y+41	; 0x29
    11d4:	78 0f       	add	r23, r24
    11d6:	79 ab       	std	Y+49, r23	; 0x31
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	9b af       	std	Y+59, r25	; 0x3b
    11dc:	09 a9       	ldd	r16, Y+49	; 0x31
    11de:	19 a1       	ldd	r17, Y+33	; 0x21
    11e0:	01 17       	cp	r16, r17
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <TIMER0_u8BusyWait+0x11a>
    11e4:	1b ae       	std	Y+59, r1	; 0x3b
    11e6:	28 ad       	ldd	r18, Y+56	; 0x38
    11e8:	39 a9       	ldd	r19, Y+49	; 0x31
    11ea:	23 0f       	add	r18, r19
    11ec:	2c af       	std	Y+60, r18	; 0x3c
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	4d af       	std	Y+61, r20	; 0x3d
    11f2:	5c ad       	ldd	r21, Y+60	; 0x3c
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	56 17       	cp	r21, r22
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <TIMER0_u8BusyWait+0x130>
    11fa:	1d ae       	std	Y+61, r1	; 0x3d
    11fc:	7b ad       	ldd	r23, Y+59	; 0x3b
    11fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1200:	78 2b       	or	r23, r24
    1202:	7b af       	std	Y+59, r23	; 0x3b
    1204:	9c ad       	ldd	r25, Y+60	; 0x3c
    1206:	99 ab       	std	Y+49, r25	; 0x31
    1208:	0a a1       	ldd	r16, Y+34	; 0x22
    120a:	1a a5       	ldd	r17, Y+42	; 0x2a
    120c:	01 0f       	add	r16, r17
    120e:	0a ab       	std	Y+50, r16	; 0x32
    1210:	21 e0       	ldi	r18, 0x01	; 1
    1212:	2e af       	std	Y+62, r18	; 0x3e
    1214:	3a a9       	ldd	r19, Y+50	; 0x32
    1216:	4a a1       	ldd	r20, Y+34	; 0x22
    1218:	34 17       	cp	r19, r20
    121a:	08 f0       	brcs	.+2      	; 0x121e <TIMER0_u8BusyWait+0x152>
    121c:	1e ae       	std	Y+62, r1	; 0x3e
    121e:	5b ad       	ldd	r21, Y+59	; 0x3b
    1220:	6a a9       	ldd	r22, Y+50	; 0x32
    1222:	56 0f       	add	r21, r22
    1224:	5f af       	std	Y+63, r21	; 0x3f
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	21 96       	adiw	r28, 0x01	; 1
    122a:	7f af       	std	Y+63, r23	; 0x3f
    122c:	21 97       	sbiw	r28, 0x01	; 1
    122e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1230:	9a a9       	ldd	r25, Y+50	; 0x32
    1232:	89 17       	cp	r24, r25
    1234:	18 f0       	brcs	.+6      	; 0x123c <TIMER0_u8BusyWait+0x170>
    1236:	21 96       	adiw	r28, 0x01	; 1
    1238:	1f ae       	std	Y+63, r1	; 0x3f
    123a:	21 97       	sbiw	r28, 0x01	; 1
    123c:	0e ad       	ldd	r16, Y+62	; 0x3e
    123e:	21 96       	adiw	r28, 0x01	; 1
    1240:	1f ad       	ldd	r17, Y+63	; 0x3f
    1242:	21 97       	sbiw	r28, 0x01	; 1
    1244:	01 2b       	or	r16, r17
    1246:	0e af       	std	Y+62, r16	; 0x3e
    1248:	2f ad       	ldd	r18, Y+63	; 0x3f
    124a:	2a ab       	std	Y+50, r18	; 0x32
    124c:	3b a1       	ldd	r19, Y+35	; 0x23
    124e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1250:	34 0f       	add	r19, r20
    1252:	3b ab       	std	Y+51, r19	; 0x33
    1254:	51 e0       	ldi	r21, 0x01	; 1
    1256:	22 96       	adiw	r28, 0x02	; 2
    1258:	5f af       	std	Y+63, r21	; 0x3f
    125a:	22 97       	sbiw	r28, 0x02	; 2
    125c:	6b a9       	ldd	r22, Y+51	; 0x33
    125e:	7b a1       	ldd	r23, Y+35	; 0x23
    1260:	67 17       	cp	r22, r23
    1262:	18 f0       	brcs	.+6      	; 0x126a <TIMER0_u8BusyWait+0x19e>
    1264:	22 96       	adiw	r28, 0x02	; 2
    1266:	1f ae       	std	Y+63, r1	; 0x3f
    1268:	22 97       	sbiw	r28, 0x02	; 2
    126a:	8e ad       	ldd	r24, Y+62	; 0x3e
    126c:	9b a9       	ldd	r25, Y+51	; 0x33
    126e:	89 0f       	add	r24, r25
    1270:	23 96       	adiw	r28, 0x03	; 3
    1272:	8f af       	std	Y+63, r24	; 0x3f
    1274:	23 97       	sbiw	r28, 0x03	; 3
    1276:	01 e0       	ldi	r16, 0x01	; 1
    1278:	24 96       	adiw	r28, 0x04	; 4
    127a:	0f af       	std	Y+63, r16	; 0x3f
    127c:	24 97       	sbiw	r28, 0x04	; 4
    127e:	23 96       	adiw	r28, 0x03	; 3
    1280:	1f ad       	ldd	r17, Y+63	; 0x3f
    1282:	23 97       	sbiw	r28, 0x03	; 3
    1284:	2b a9       	ldd	r18, Y+51	; 0x33
    1286:	12 17       	cp	r17, r18
    1288:	18 f0       	brcs	.+6      	; 0x1290 <TIMER0_u8BusyWait+0x1c4>
    128a:	24 96       	adiw	r28, 0x04	; 4
    128c:	1f ae       	std	Y+63, r1	; 0x3f
    128e:	24 97       	sbiw	r28, 0x04	; 4
    1290:	22 96       	adiw	r28, 0x02	; 2
    1292:	3f ad       	ldd	r19, Y+63	; 0x3f
    1294:	22 97       	sbiw	r28, 0x02	; 2
    1296:	24 96       	adiw	r28, 0x04	; 4
    1298:	4f ad       	ldd	r20, Y+63	; 0x3f
    129a:	24 97       	sbiw	r28, 0x04	; 4
    129c:	34 2b       	or	r19, r20
    129e:	22 96       	adiw	r28, 0x02	; 2
    12a0:	3f af       	std	Y+63, r19	; 0x3f
    12a2:	22 97       	sbiw	r28, 0x02	; 2
    12a4:	23 96       	adiw	r28, 0x03	; 3
    12a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    12a8:	23 97       	sbiw	r28, 0x03	; 3
    12aa:	5b ab       	std	Y+51, r21	; 0x33
    12ac:	6c a1       	ldd	r22, Y+36	; 0x24
    12ae:	7c a5       	ldd	r23, Y+44	; 0x2c
    12b0:	67 0f       	add	r22, r23
    12b2:	6c ab       	std	Y+52, r22	; 0x34
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	25 96       	adiw	r28, 0x05	; 5
    12b8:	8f af       	std	Y+63, r24	; 0x3f
    12ba:	25 97       	sbiw	r28, 0x05	; 5
    12bc:	9c a9       	ldd	r25, Y+52	; 0x34
    12be:	0c a1       	ldd	r16, Y+36	; 0x24
    12c0:	90 17       	cp	r25, r16
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <TIMER0_u8BusyWait+0x1fe>
    12c4:	25 96       	adiw	r28, 0x05	; 5
    12c6:	1f ae       	std	Y+63, r1	; 0x3f
    12c8:	25 97       	sbiw	r28, 0x05	; 5
    12ca:	22 96       	adiw	r28, 0x02	; 2
    12cc:	1f ad       	ldd	r17, Y+63	; 0x3f
    12ce:	22 97       	sbiw	r28, 0x02	; 2
    12d0:	2c a9       	ldd	r18, Y+52	; 0x34
    12d2:	12 0f       	add	r17, r18
    12d4:	26 96       	adiw	r28, 0x06	; 6
    12d6:	1f af       	std	Y+63, r17	; 0x3f
    12d8:	26 97       	sbiw	r28, 0x06	; 6
    12da:	31 e0       	ldi	r19, 0x01	; 1
    12dc:	27 96       	adiw	r28, 0x07	; 7
    12de:	3f af       	std	Y+63, r19	; 0x3f
    12e0:	27 97       	sbiw	r28, 0x07	; 7
    12e2:	26 96       	adiw	r28, 0x06	; 6
    12e4:	4f ad       	ldd	r20, Y+63	; 0x3f
    12e6:	26 97       	sbiw	r28, 0x06	; 6
    12e8:	5c a9       	ldd	r21, Y+52	; 0x34
    12ea:	45 17       	cp	r20, r21
    12ec:	18 f0       	brcs	.+6      	; 0x12f4 <TIMER0_u8BusyWait+0x228>
    12ee:	27 96       	adiw	r28, 0x07	; 7
    12f0:	1f ae       	std	Y+63, r1	; 0x3f
    12f2:	27 97       	sbiw	r28, 0x07	; 7
    12f4:	25 96       	adiw	r28, 0x05	; 5
    12f6:	6f ad       	ldd	r22, Y+63	; 0x3f
    12f8:	25 97       	sbiw	r28, 0x05	; 5
    12fa:	27 96       	adiw	r28, 0x07	; 7
    12fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    12fe:	27 97       	sbiw	r28, 0x07	; 7
    1300:	67 2b       	or	r22, r23
    1302:	25 96       	adiw	r28, 0x05	; 5
    1304:	6f af       	std	Y+63, r22	; 0x3f
    1306:	25 97       	sbiw	r28, 0x05	; 5
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	8f ad       	ldd	r24, Y+63	; 0x3f
    130c:	26 97       	sbiw	r28, 0x06	; 6
    130e:	8c ab       	std	Y+52, r24	; 0x34
    1310:	9d a1       	ldd	r25, Y+37	; 0x25
    1312:	0d a5       	ldd	r16, Y+45	; 0x2d
    1314:	90 0f       	add	r25, r16
    1316:	9d ab       	std	Y+53, r25	; 0x35
    1318:	11 e0       	ldi	r17, 0x01	; 1
    131a:	28 96       	adiw	r28, 0x08	; 8
    131c:	1f af       	std	Y+63, r17	; 0x3f
    131e:	28 97       	sbiw	r28, 0x08	; 8
    1320:	2d a9       	ldd	r18, Y+53	; 0x35
    1322:	3d a1       	ldd	r19, Y+37	; 0x25
    1324:	23 17       	cp	r18, r19
    1326:	18 f0       	brcs	.+6      	; 0x132e <TIMER0_u8BusyWait+0x262>
    1328:	28 96       	adiw	r28, 0x08	; 8
    132a:	1f ae       	std	Y+63, r1	; 0x3f
    132c:	28 97       	sbiw	r28, 0x08	; 8
    132e:	25 96       	adiw	r28, 0x05	; 5
    1330:	4f ad       	ldd	r20, Y+63	; 0x3f
    1332:	25 97       	sbiw	r28, 0x05	; 5
    1334:	5d a9       	ldd	r21, Y+53	; 0x35
    1336:	45 0f       	add	r20, r21
    1338:	29 96       	adiw	r28, 0x09	; 9
    133a:	4f af       	std	Y+63, r20	; 0x3f
    133c:	29 97       	sbiw	r28, 0x09	; 9
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	2a 96       	adiw	r28, 0x0a	; 10
    1342:	6f af       	std	Y+63, r22	; 0x3f
    1344:	2a 97       	sbiw	r28, 0x0a	; 10
    1346:	29 96       	adiw	r28, 0x09	; 9
    1348:	7f ad       	ldd	r23, Y+63	; 0x3f
    134a:	29 97       	sbiw	r28, 0x09	; 9
    134c:	8d a9       	ldd	r24, Y+53	; 0x35
    134e:	78 17       	cp	r23, r24
    1350:	18 f0       	brcs	.+6      	; 0x1358 <TIMER0_u8BusyWait+0x28c>
    1352:	2a 96       	adiw	r28, 0x0a	; 10
    1354:	1f ae       	std	Y+63, r1	; 0x3f
    1356:	2a 97       	sbiw	r28, 0x0a	; 10
    1358:	28 96       	adiw	r28, 0x08	; 8
    135a:	9f ad       	ldd	r25, Y+63	; 0x3f
    135c:	28 97       	sbiw	r28, 0x08	; 8
    135e:	2a 96       	adiw	r28, 0x0a	; 10
    1360:	0f ad       	ldd	r16, Y+63	; 0x3f
    1362:	2a 97       	sbiw	r28, 0x0a	; 10
    1364:	90 2b       	or	r25, r16
    1366:	28 96       	adiw	r28, 0x08	; 8
    1368:	9f af       	std	Y+63, r25	; 0x3f
    136a:	28 97       	sbiw	r28, 0x08	; 8
    136c:	29 96       	adiw	r28, 0x09	; 9
    136e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1370:	29 97       	sbiw	r28, 0x09	; 9
    1372:	1d ab       	std	Y+53, r17	; 0x35
    1374:	2e a1       	ldd	r18, Y+38	; 0x26
    1376:	3e a5       	ldd	r19, Y+46	; 0x2e
    1378:	23 0f       	add	r18, r19
    137a:	2e ab       	std	Y+54, r18	; 0x36
    137c:	28 96       	adiw	r28, 0x08	; 8
    137e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1380:	28 97       	sbiw	r28, 0x08	; 8
    1382:	4e a9       	ldd	r20, Y+54	; 0x36
    1384:	84 0f       	add	r24, r20
    1386:	8e ab       	std	Y+54, r24	; 0x36
    1388:	2f a5       	ldd	r18, Y+47	; 0x2f
    138a:	38 a9       	ldd	r19, Y+48	; 0x30
    138c:	49 a9       	ldd	r20, Y+49	; 0x31
    138e:	5a a9       	ldd	r21, Y+50	; 0x32
    1390:	6b a9       	ldd	r22, Y+51	; 0x33
    1392:	7c a9       	ldd	r23, Y+52	; 0x34
    1394:	8d a9       	ldd	r24, Y+53	; 0x35
    1396:	9e a9       	ldd	r25, Y+54	; 0x36
    1398:	2a 83       	std	Y+2, r18	; 0x02
    139a:	3b 83       	std	Y+3, r19	; 0x03
    139c:	4c 83       	std	Y+4, r20	; 0x04
    139e:	5d 83       	std	Y+5, r21	; 0x05
    13a0:	6e 83       	std	Y+6, r22	; 0x06
    13a2:	7f 83       	std	Y+7, r23	; 0x07
    13a4:	88 87       	std	Y+8, r24	; 0x08
    13a6:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
    13a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    13ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    13ae:	be 85       	ldd	r27, Y+14	; 0x0e
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	aa 1f       	adc	r26, r26
    13b6:	bb 1f       	adc	r27, r27
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	8c 01       	movw	r16, r24
    13c2:	9d 01       	movw	r18, r26
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	0f 8b       	std	Y+23, r16	; 0x17
    13ce:	18 8f       	std	Y+24, r17	; 0x18
    13d0:	29 8f       	std	Y+25, r18	; 0x19
    13d2:	3a 8f       	std	Y+26, r19	; 0x1a
    13d4:	4b 8f       	std	Y+27, r20	; 0x1b
    13d6:	5c 8f       	std	Y+28, r21	; 0x1c
    13d8:	6d 8f       	std	Y+29, r22	; 0x1d
    13da:	7e 8f       	std	Y+30, r23	; 0x1e
    13dc:	1a 81       	ldd	r17, Y+2	; 0x02
    13de:	1f 87       	std	Y+15, r17	; 0x0f
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	28 8b       	std	Y+16, r18	; 0x10
    13e4:	3c 81       	ldd	r19, Y+4	; 0x04
    13e6:	39 8b       	std	Y+17, r19	; 0x11
    13e8:	4d 81       	ldd	r20, Y+5	; 0x05
    13ea:	4a 8b       	std	Y+18, r20	; 0x12
    13ec:	5e 81       	ldd	r21, Y+6	; 0x06
    13ee:	5b 8b       	std	Y+19, r21	; 0x13
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	6c 8b       	std	Y+20, r22	; 0x14
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	7d 8b       	std	Y+21, r23	; 0x15
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	8e 8b       	std	Y+22, r24	; 0x16
    13fc:	9e 89       	ldd	r25, Y+22	; 0x16
    13fe:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1400:	09 17       	cp	r16, r25
    1402:	08 f4       	brcc	.+2      	; 0x1406 <TIMER0_u8BusyWait+0x33a>
    1404:	42 c0       	rjmp	.+132    	; 0x148a <TIMER0_u8BusyWait+0x3be>
    1406:	1e 89       	ldd	r17, Y+22	; 0x16
    1408:	2e 8d       	ldd	r18, Y+30	; 0x1e
    140a:	12 17       	cp	r17, r18
    140c:	09 f0       	breq	.+2      	; 0x1410 <TIMER0_u8BusyWait+0x344>
    140e:	92 ce       	rjmp	.-732    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    1410:	3d 89       	ldd	r19, Y+21	; 0x15
    1412:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1414:	43 17       	cp	r20, r19
    1416:	c8 f1       	brcs	.+114    	; 0x148a <TIMER0_u8BusyWait+0x3be>
    1418:	5d 89       	ldd	r21, Y+21	; 0x15
    141a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    141c:	56 17       	cp	r21, r22
    141e:	09 f0       	breq	.+2      	; 0x1422 <TIMER0_u8BusyWait+0x356>
    1420:	89 ce       	rjmp	.-750    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    1422:	7c 89       	ldd	r23, Y+20	; 0x14
    1424:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1426:	87 17       	cp	r24, r23
    1428:	80 f1       	brcs	.+96     	; 0x148a <TIMER0_u8BusyWait+0x3be>
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	0c 8d       	ldd	r16, Y+28	; 0x1c
    142e:	90 17       	cp	r25, r16
    1430:	09 f0       	breq	.+2      	; 0x1434 <TIMER0_u8BusyWait+0x368>
    1432:	80 ce       	rjmp	.-768    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    1434:	1b 89       	ldd	r17, Y+19	; 0x13
    1436:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1438:	21 17       	cp	r18, r17
    143a:	38 f1       	brcs	.+78     	; 0x148a <TIMER0_u8BusyWait+0x3be>
    143c:	3b 89       	ldd	r19, Y+19	; 0x13
    143e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1440:	34 17       	cp	r19, r20
    1442:	09 f0       	breq	.+2      	; 0x1446 <TIMER0_u8BusyWait+0x37a>
    1444:	77 ce       	rjmp	.-786    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    1446:	5a 89       	ldd	r21, Y+18	; 0x12
    1448:	6a 8d       	ldd	r22, Y+26	; 0x1a
    144a:	65 17       	cp	r22, r21
    144c:	f0 f0       	brcs	.+60     	; 0x148a <TIMER0_u8BusyWait+0x3be>
    144e:	7a 89       	ldd	r23, Y+18	; 0x12
    1450:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1452:	78 17       	cp	r23, r24
    1454:	09 f0       	breq	.+2      	; 0x1458 <TIMER0_u8BusyWait+0x38c>
    1456:	6e ce       	rjmp	.-804    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    1458:	99 89       	ldd	r25, Y+17	; 0x11
    145a:	09 8d       	ldd	r16, Y+25	; 0x19
    145c:	09 17       	cp	r16, r25
    145e:	a8 f0       	brcs	.+42     	; 0x148a <TIMER0_u8BusyWait+0x3be>
    1460:	19 89       	ldd	r17, Y+17	; 0x11
    1462:	29 8d       	ldd	r18, Y+25	; 0x19
    1464:	12 17       	cp	r17, r18
    1466:	09 f0       	breq	.+2      	; 0x146a <TIMER0_u8BusyWait+0x39e>
    1468:	65 ce       	rjmp	.-822    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    146a:	38 89       	ldd	r19, Y+16	; 0x10
    146c:	48 8d       	ldd	r20, Y+24	; 0x18
    146e:	43 17       	cp	r20, r19
    1470:	60 f0       	brcs	.+24     	; 0x148a <TIMER0_u8BusyWait+0x3be>
    1472:	58 89       	ldd	r21, Y+16	; 0x10
    1474:	68 8d       	ldd	r22, Y+24	; 0x18
    1476:	56 17       	cp	r21, r22
    1478:	09 f0       	breq	.+2      	; 0x147c <TIMER0_u8BusyWait+0x3b0>
    147a:	5c ce       	rjmp	.-840    	; 0x1134 <TIMER0_u8BusyWait+0x68>
    147c:	7f 85       	ldd	r23, Y+15	; 0x0f
    147e:	8f 89       	ldd	r24, Y+23	; 0x17
    1480:	87 17       	cp	r24, r23
    1482:	18 f0       	brcs	.+6      	; 0x148a <TIMER0_u8BusyWait+0x3be>
    1484:	57 ce       	rjmp	.-850    	; 0x1134 <TIMER0_u8BusyWait+0x68>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    1486:	84 e1       	ldi	r24, 0x14	; 20
    1488:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    148c:	c7 5b       	subi	r28, 0xB7	; 183
    148e:	df 4f       	sbci	r29, 0xFF	; 255
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <TIMER0_u8InterruptWait+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TIMER0_u8InterruptWait+0x8>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	6a 83       	std	Y+2, r22	; 0x02
    14b4:	7b 83       	std	Y+3, r23	; 0x03
    14b6:	8c 83       	std	Y+4, r24	; 0x04
    14b8:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    14ba:	83 e1       	ldi	r24, 0x13	; 19
    14bc:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED)
    14be:	80 91 61 00 	lds	r24, 0x0061
    14c2:	83 31       	cpi	r24, 0x13	; 19
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <TIMER0_u8InterruptWait+0x24>
    14c6:	43 c0       	rjmp	.+134    	; 0x154e <TIMER0_u8InterruptWait+0xaa>
	{
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    14c8:	81 e1       	ldi	r24, 0x11	; 17
    14ca:	0e 94 6a 07 	call	0xed4	; 0xed4 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    14ce:	82 e1       	ldi	r24, 0x12	; 18
    14d0:	0e 94 6a 07 	call	0xed4	; 0xed4 <TIMERS_u8IntModesDis>
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	ac 81       	ldd	r26, Y+4	; 0x04
    14da:	bd 81       	ldd	r27, Y+5	; 0x05
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	aa 1f       	adc	r26, r26
    14e2:	bb 1f       	adc	r27, r27
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	aa 1f       	adc	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	9c 01       	movw	r18, r24
    14ee:	ad 01       	movw	r20, r26
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	20 93 62 00 	sts	0x0062, r18
    14fc:	30 93 63 00 	sts	0x0063, r19
    1500:	40 93 64 00 	sts	0x0064, r20
    1504:	50 93 65 00 	sts	0x0065, r21
    1508:	60 93 66 00 	sts	0x0066, r22
    150c:	70 93 67 00 	sts	0x0067, r23
    1510:	80 93 68 00 	sts	0x0068, r24
    1514:	90 93 69 00 	sts	0x0069, r25
		TIMER0_voidstop() ;
    1518:	0e 94 a4 06 	call	0xd48	; 0xd48 <TIMER0_voidstop>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    151c:	8a ef       	ldi	r24, 0xFA	; 250
    151e:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	0e 94 9c 07 	call	0xf38	; 0xf38 <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
    1528:	84 e1       	ldi	r24, 0x14	; 20
    152a:	80 93 61 00 	sts	0x0061, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
    152e:	82 e1       	ldi	r24, 0x12	; 18
    1530:	0e 94 2a 07 	call	0xe54	; 0xe54 <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
    1534:	22 eb       	ldi	r18, 0xB2	; 178
    1536:	3a e0       	ldi	r19, 0x0A	; 10
    1538:	82 e1       	ldi	r24, 0x12	; 18
    153a:	b9 01       	movw	r22, r18
    153c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1540:	87 e0       	ldi	r24, 0x07	; 7
    1542:	0e 94 c4 05 	call	0xb88	; 0xb88 <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    1546:	87 e1       	ldi	r24, 0x17	; 23
    1548:	80 93 60 00 	sts	0x0060, r24
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <TIMER0_u8InterruptWait+0xae>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    154e:	84 e1       	ldi	r24, 0x14	; 20
    1550:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	e3 97       	sbiw	r28, 0x33	; 51
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
	if(gu8_FlagIfTimer0Used == u8_TIMER0_FLAG_USED && gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    1578:	80 91 61 00 	lds	r24, 0x0061
    157c:	84 31       	cpi	r24, 0x14	; 20
    157e:	09 f0       	breq	.+2      	; 0x1582 <void_IntWaitControlFlagCount+0x1e>
    1580:	49 c1       	rjmp	.+658    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    1582:	80 91 62 00 	lds	r24, 0x0062
    1586:	89 87       	std	Y+9, r24	; 0x09
    1588:	90 91 63 00 	lds	r25, 0x0063
    158c:	9a 87       	std	Y+10, r25	; 0x0a
    158e:	80 91 64 00 	lds	r24, 0x0064
    1592:	8b 87       	std	Y+11, r24	; 0x0b
    1594:	90 91 65 00 	lds	r25, 0x0065
    1598:	9c 87       	std	Y+12, r25	; 0x0c
    159a:	80 91 66 00 	lds	r24, 0x0066
    159e:	8d 87       	std	Y+13, r24	; 0x0d
    15a0:	90 91 67 00 	lds	r25, 0x0067
    15a4:	9e 87       	std	Y+14, r25	; 0x0e
    15a6:	80 91 68 00 	lds	r24, 0x0068
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
    15ac:	90 91 69 00 	lds	r25, 0x0069
    15b0:	98 8b       	std	Y+16, r25	; 0x10
    15b2:	88 89       	ldd	r24, Y+16	; 0x10
    15b4:	88 23       	and	r24, r24
    15b6:	91 f5       	brne	.+100    	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15b8:	98 89       	ldd	r25, Y+16	; 0x10
    15ba:	99 23       	and	r25, r25
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <void_IntWaitControlFlagCount+0x5c>
    15be:	2a c1       	rjmp	.+596    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    15c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c2:	88 23       	and	r24, r24
    15c4:	59 f5       	brne	.+86     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c8:	99 23       	and	r25, r25
    15ca:	09 f0       	breq	.+2      	; 0x15ce <void_IntWaitControlFlagCount+0x6a>
    15cc:	23 c1       	rjmp	.+582    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    15ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    15d0:	88 23       	and	r24, r24
    15d2:	21 f5       	brne	.+72     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d6:	99 23       	and	r25, r25
    15d8:	09 f0       	breq	.+2      	; 0x15dc <void_IntWaitControlFlagCount+0x78>
    15da:	1c c1       	rjmp	.+568    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	88 23       	and	r24, r24
    15e0:	e9 f4       	brne	.+58     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e4:	99 23       	and	r25, r25
    15e6:	09 f0       	breq	.+2      	; 0x15ea <void_IntWaitControlFlagCount+0x86>
    15e8:	15 c1       	rjmp	.+554    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    15ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ec:	88 23       	and	r24, r24
    15ee:	b1 f4       	brne	.+44     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f2:	99 23       	and	r25, r25
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <void_IntWaitControlFlagCount+0x94>
    15f6:	0e c1       	rjmp	.+540    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    15f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fa:	88 23       	and	r24, r24
    15fc:	79 f4       	brne	.+30     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    15fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1600:	99 23       	and	r25, r25
    1602:	09 f0       	breq	.+2      	; 0x1606 <void_IntWaitControlFlagCount+0xa2>
    1604:	07 c1       	rjmp	.+526    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    1606:	8a 85       	ldd	r24, Y+10	; 0x0a
    1608:	88 23       	and	r24, r24
    160a:	41 f4       	brne	.+16     	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	99 23       	and	r25, r25
    1610:	09 f0       	breq	.+2      	; 0x1614 <void_IntWaitControlFlagCount+0xb0>
    1612:	00 c1       	rjmp	.+512    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	89 31       	cpi	r24, 0x19	; 25
    1618:	08 f4       	brcc	.+2      	; 0x161c <void_IntWaitControlFlagCount+0xb8>
    161a:	fc c0       	rjmp	.+504    	; 0x1814 <void_IntWaitControlFlagCount+0x2b0>
	{
		gu64_IntWaitcounter-- ;
    161c:	90 91 62 00 	lds	r25, 0x0062
    1620:	99 83       	std	Y+1, r25	; 0x01
    1622:	80 91 63 00 	lds	r24, 0x0063
    1626:	8a 83       	std	Y+2, r24	; 0x02
    1628:	90 91 64 00 	lds	r25, 0x0064
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	80 91 65 00 	lds	r24, 0x0065
    1632:	8c 83       	std	Y+4, r24	; 0x04
    1634:	90 91 66 00 	lds	r25, 0x0066
    1638:	9d 83       	std	Y+5, r25	; 0x05
    163a:	80 91 67 00 	lds	r24, 0x0067
    163e:	8e 83       	std	Y+6, r24	; 0x06
    1640:	90 91 68 00 	lds	r25, 0x0068
    1644:	9f 83       	std	Y+7, r25	; 0x07
    1646:	80 91 69 00 	lds	r24, 0x0069
    164a:	88 87       	std	Y+8, r24	; 0x08
    164c:	9f ef       	ldi	r25, 0xFF	; 255
    164e:	99 8b       	std	Y+17, r25	; 0x11
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	8a 8b       	std	Y+18, r24	; 0x12
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	9b 8b       	std	Y+19, r25	; 0x13
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	8c 8b       	std	Y+20, r24	; 0x14
    165c:	9f ef       	ldi	r25, 0xFF	; 255
    165e:	9d 8b       	std	Y+21, r25	; 0x15
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	8e 8b       	std	Y+22, r24	; 0x16
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	9f 8b       	std	Y+23, r25	; 0x17
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	88 8f       	std	Y+24, r24	; 0x18
    166c:	99 81       	ldd	r25, Y+1	; 0x01
    166e:	89 89       	ldd	r24, Y+17	; 0x11
    1670:	98 0f       	add	r25, r24
    1672:	99 8f       	std	Y+25, r25	; 0x19
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	99 a3       	std	Y+33, r25	; 0x21
    1678:	89 8d       	ldd	r24, Y+25	; 0x19
    167a:	99 81       	ldd	r25, Y+1	; 0x01
    167c:	89 17       	cp	r24, r25
    167e:	08 f0       	brcs	.+2      	; 0x1682 <void_IntWaitControlFlagCount+0x11e>
    1680:	19 a2       	std	Y+33, r1	; 0x21
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	89 0f       	add	r24, r25
    1688:	8a 8f       	std	Y+26, r24	; 0x1a
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	8a a3       	std	Y+34, r24	; 0x22
    168e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	98 17       	cp	r25, r24
    1694:	08 f0       	brcs	.+2      	; 0x1698 <void_IntWaitControlFlagCount+0x134>
    1696:	1a a2       	std	Y+34, r1	; 0x22
    1698:	99 a1       	ldd	r25, Y+33	; 0x21
    169a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    169c:	98 0f       	add	r25, r24
    169e:	9b a3       	std	Y+35, r25	; 0x23
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	9c a3       	std	Y+36, r25	; 0x24
    16a4:	8b a1       	ldd	r24, Y+35	; 0x23
    16a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16a8:	89 17       	cp	r24, r25
    16aa:	08 f0       	brcs	.+2      	; 0x16ae <void_IntWaitControlFlagCount+0x14a>
    16ac:	1c a2       	std	Y+36, r1	; 0x24
    16ae:	8a a1       	ldd	r24, Y+34	; 0x22
    16b0:	9c a1       	ldd	r25, Y+36	; 0x24
    16b2:	89 2b       	or	r24, r25
    16b4:	8a a3       	std	Y+34, r24	; 0x22
    16b6:	8b a1       	ldd	r24, Y+35	; 0x23
    16b8:	8a 8f       	std	Y+26, r24	; 0x1a
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	8b 89       	ldd	r24, Y+19	; 0x13
    16be:	98 0f       	add	r25, r24
    16c0:	9b 8f       	std	Y+27, r25	; 0x1b
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	9d a3       	std	Y+37, r25	; 0x25
    16c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	89 17       	cp	r24, r25
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <void_IntWaitControlFlagCount+0x16c>
    16ce:	1d a2       	std	Y+37, r1	; 0x25
    16d0:	8a a1       	ldd	r24, Y+34	; 0x22
    16d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16d4:	89 0f       	add	r24, r25
    16d6:	8e a3       	std	Y+38, r24	; 0x26
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	8f a3       	std	Y+39, r24	; 0x27
    16dc:	9e a1       	ldd	r25, Y+38	; 0x26
    16de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e0:	98 17       	cp	r25, r24
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <void_IntWaitControlFlagCount+0x182>
    16e4:	1f a2       	std	Y+39, r1	; 0x27
    16e6:	9d a1       	ldd	r25, Y+37	; 0x25
    16e8:	8f a1       	ldd	r24, Y+39	; 0x27
    16ea:	98 2b       	or	r25, r24
    16ec:	9d a3       	std	Y+37, r25	; 0x25
    16ee:	9e a1       	ldd	r25, Y+38	; 0x26
    16f0:	9b 8f       	std	Y+27, r25	; 0x1b
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9c 89       	ldd	r25, Y+20	; 0x14
    16f6:	89 0f       	add	r24, r25
    16f8:	8c 8f       	std	Y+28, r24	; 0x1c
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	88 a7       	std	Y+40, r24	; 0x28
    16fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	98 17       	cp	r25, r24
    1704:	08 f0       	brcs	.+2      	; 0x1708 <void_IntWaitControlFlagCount+0x1a4>
    1706:	18 a6       	std	Y+40, r1	; 0x28
    1708:	9d a1       	ldd	r25, Y+37	; 0x25
    170a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    170c:	98 0f       	add	r25, r24
    170e:	99 a7       	std	Y+41, r25	; 0x29
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	9a a7       	std	Y+42, r25	; 0x2a
    1714:	89 a5       	ldd	r24, Y+41	; 0x29
    1716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1718:	89 17       	cp	r24, r25
    171a:	08 f0       	brcs	.+2      	; 0x171e <void_IntWaitControlFlagCount+0x1ba>
    171c:	1a a6       	std	Y+42, r1	; 0x2a
    171e:	88 a5       	ldd	r24, Y+40	; 0x28
    1720:	9a a5       	ldd	r25, Y+42	; 0x2a
    1722:	89 2b       	or	r24, r25
    1724:	88 a7       	std	Y+40, r24	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	8c 8f       	std	Y+28, r24	; 0x1c
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	8d 89       	ldd	r24, Y+21	; 0x15
    172e:	98 0f       	add	r25, r24
    1730:	9d 8f       	std	Y+29, r25	; 0x1d
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	9b a7       	std	Y+43, r25	; 0x2b
    1736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	89 17       	cp	r24, r25
    173c:	08 f0       	brcs	.+2      	; 0x1740 <void_IntWaitControlFlagCount+0x1dc>
    173e:	1b a6       	std	Y+43, r1	; 0x2b
    1740:	88 a5       	ldd	r24, Y+40	; 0x28
    1742:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1744:	89 0f       	add	r24, r25
    1746:	8c a7       	std	Y+44, r24	; 0x2c
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	8d a7       	std	Y+45, r24	; 0x2d
    174c:	9c a5       	ldd	r25, Y+44	; 0x2c
    174e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1750:	98 17       	cp	r25, r24
    1752:	08 f0       	brcs	.+2      	; 0x1756 <void_IntWaitControlFlagCount+0x1f2>
    1754:	1d a6       	std	Y+45, r1	; 0x2d
    1756:	9b a5       	ldd	r25, Y+43	; 0x2b
    1758:	8d a5       	ldd	r24, Y+45	; 0x2d
    175a:	98 2b       	or	r25, r24
    175c:	9b a7       	std	Y+43, r25	; 0x2b
    175e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1760:	9d 8f       	std	Y+29, r25	; 0x1d
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9e 89       	ldd	r25, Y+22	; 0x16
    1766:	89 0f       	add	r24, r25
    1768:	8e 8f       	std	Y+30, r24	; 0x1e
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	8e a7       	std	Y+46, r24	; 0x2e
    176e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	98 17       	cp	r25, r24
    1774:	08 f0       	brcs	.+2      	; 0x1778 <void_IntWaitControlFlagCount+0x214>
    1776:	1e a6       	std	Y+46, r1	; 0x2e
    1778:	9b a5       	ldd	r25, Y+43	; 0x2b
    177a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    177c:	98 0f       	add	r25, r24
    177e:	9f a7       	std	Y+47, r25	; 0x2f
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	98 ab       	std	Y+48, r25	; 0x30
    1784:	8f a5       	ldd	r24, Y+47	; 0x2f
    1786:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1788:	89 17       	cp	r24, r25
    178a:	08 f0       	brcs	.+2      	; 0x178e <void_IntWaitControlFlagCount+0x22a>
    178c:	18 aa       	std	Y+48, r1	; 0x30
    178e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1790:	98 a9       	ldd	r25, Y+48	; 0x30
    1792:	89 2b       	or	r24, r25
    1794:	8e a7       	std	Y+46, r24	; 0x2e
    1796:	8f a5       	ldd	r24, Y+47	; 0x2f
    1798:	8e 8f       	std	Y+30, r24	; 0x1e
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 0f       	add	r25, r24
    17a0:	9f 8f       	std	Y+31, r25	; 0x1f
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	99 ab       	std	Y+49, r25	; 0x31
    17a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	89 17       	cp	r24, r25
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <void_IntWaitControlFlagCount+0x24c>
    17ae:	19 aa       	std	Y+49, r1	; 0x31
    17b0:	8e a5       	ldd	r24, Y+46	; 0x2e
    17b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b4:	89 0f       	add	r24, r25
    17b6:	8a ab       	std	Y+50, r24	; 0x32
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	8b ab       	std	Y+51, r24	; 0x33
    17bc:	9a a9       	ldd	r25, Y+50	; 0x32
    17be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c0:	98 17       	cp	r25, r24
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <void_IntWaitControlFlagCount+0x262>
    17c4:	1b aa       	std	Y+51, r1	; 0x33
    17c6:	99 a9       	ldd	r25, Y+49	; 0x31
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	98 2b       	or	r25, r24
    17cc:	99 ab       	std	Y+49, r25	; 0x31
    17ce:	9a a9       	ldd	r25, Y+50	; 0x32
    17d0:	9f 8f       	std	Y+31, r25	; 0x1f
    17d2:	88 85       	ldd	r24, Y+8	; 0x08
    17d4:	98 8d       	ldd	r25, Y+24	; 0x18
    17d6:	89 0f       	add	r24, r25
    17d8:	88 a3       	std	Y+32, r24	; 0x20
    17da:	89 a9       	ldd	r24, Y+49	; 0x31
    17dc:	98 a1       	ldd	r25, Y+32	; 0x20
    17de:	89 0f       	add	r24, r25
    17e0:	88 a3       	std	Y+32, r24	; 0x20
    17e2:	29 8d       	ldd	r18, Y+25	; 0x19
    17e4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17e6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17e8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
    17ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17f0:	98 a1       	ldd	r25, Y+32	; 0x20
    17f2:	20 93 62 00 	sts	0x0062, r18
    17f6:	30 93 63 00 	sts	0x0063, r19
    17fa:	40 93 64 00 	sts	0x0064, r20
    17fe:	50 93 65 00 	sts	0x0065, r21
    1802:	60 93 66 00 	sts	0x0066, r22
    1806:	70 93 67 00 	sts	0x0067, r23
    180a:	80 93 68 00 	sts	0x0068, r24
    180e:	90 93 69 00 	sts	0x0069, r25
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <void_IntWaitControlFlagCount+0x2bc>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    1814:	83 e1       	ldi	r24, 0x13	; 19
    1816:	80 93 61 00 	sts	0x0061, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    181a:	86 e1       	ldi	r24, 0x16	; 22
    181c:	80 93 60 00 	sts	0x0060, r24
	}
}
    1820:	e3 96       	adiw	r28, 0x33	; 51
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <_exit>:
    1832:	f8 94       	cli

00001834 <__stop_program>:
    1834:	ff cf       	rjmp	.-2      	; 0x1834 <__stop_program>
