
Timer_tasks_busy_waiting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000176a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000176a  000017fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00001808  2**0
                  ALLOC
  3 .stab         000018cc  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad4  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_10>
      2c:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 05 	call	0xa08	; 0xa08 <main>
      8a:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_u8SetPinVal+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_u8SetPinVal+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <DIO_u8SetPinVal+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
      a6:	82 e0       	ldi	r24, 0x02	; 2
      a8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
      aa:	8b 81       	ldd	r24, Y+3	; 0x03
      ac:	88 30       	cpi	r24, 0x08	; 8
      ae:	08 f0       	brcs	.+2      	; 0xb2 <DIO_u8SetPinVal+0x20>
      b0:	ee c0       	rjmp	.+476    	; 0x28e <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
      b2:	8a 81       	ldd	r24, Y+2	; 0x02
      b4:	28 2f       	mov	r18, r24
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	3e 83       	std	Y+6, r19	; 0x06
      ba:	2d 83       	std	Y+5, r18	; 0x05
      bc:	8d 81       	ldd	r24, Y+5	; 0x05
      be:	9e 81       	ldd	r25, Y+6	; 0x06
      c0:	89 30       	cpi	r24, 0x09	; 9
      c2:	91 05       	cpc	r25, r1
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_u8SetPinVal+0x36>
      c6:	4a c0       	rjmp	.+148    	; 0x15c <DIO_u8SetPinVal+0xca>
      c8:	2d 81       	ldd	r18, Y+5	; 0x05
      ca:	3e 81       	ldd	r19, Y+6	; 0x06
      cc:	2a 30       	cpi	r18, 0x0A	; 10
      ce:	31 05       	cpc	r19, r1
      d0:	34 f4       	brge	.+12     	; 0xde <DIO_u8SetPinVal+0x4c>
      d2:	8d 81       	ldd	r24, Y+5	; 0x05
      d4:	9e 81       	ldd	r25, Y+6	; 0x06
      d6:	88 30       	cpi	r24, 0x08	; 8
      d8:	91 05       	cpc	r25, r1
      da:	71 f0       	breq	.+28     	; 0xf8 <DIO_u8SetPinVal+0x66>
      dc:	d5 c0       	rjmp	.+426    	; 0x288 <DIO_u8SetPinVal+0x1f6>
      de:	2d 81       	ldd	r18, Y+5	; 0x05
      e0:	3e 81       	ldd	r19, Y+6	; 0x06
      e2:	2a 30       	cpi	r18, 0x0A	; 10
      e4:	31 05       	cpc	r19, r1
      e6:	09 f4       	brne	.+2      	; 0xea <DIO_u8SetPinVal+0x58>
      e8:	6b c0       	rjmp	.+214    	; 0x1c0 <DIO_u8SetPinVal+0x12e>
      ea:	8d 81       	ldd	r24, Y+5	; 0x05
      ec:	9e 81       	ldd	r25, Y+6	; 0x06
      ee:	8b 30       	cpi	r24, 0x0B	; 11
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_u8SetPinVal+0x64>
      f4:	97 c0       	rjmp	.+302    	; 0x224 <DIO_u8SetPinVal+0x192>
      f6:	c8 c0       	rjmp	.+400    	; 0x288 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
      f8:	8c 81       	ldd	r24, Y+4	; 0x04
      fa:	88 23       	and	r24, r24
      fc:	a9 f4       	brne	.+42     	; 0x128 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
      fe:	ab e3       	ldi	r26, 0x3B	; 59
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	eb e3       	ldi	r30, 0x3B	; 59
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 2e       	mov	r0, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinVal+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	0a 94       	dec	r0
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinVal+0x86>
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	8c 93       	st	X, r24
     126:	b5 c0       	rjmp	.+362    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     128:	8c 81       	ldd	r24, Y+4	; 0x04
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	a1 f4       	brne	.+40     	; 0x156 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
     12e:	ab e3       	ldi	r26, 0x3B	; 59
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	eb e3       	ldi	r30, 0x3B	; 59
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 2e       	mov	r0, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_u8SetPinVal+0xba>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_u8SetPinVal+0xb6>
     150:	84 2b       	or	r24, r20
     152:	8c 93       	st	X, r24
     154:	9e c0       	rjmp	.+316    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9b c0       	rjmp	.+310    	; 0x292 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
     15c:	8c 81       	ldd	r24, Y+4	; 0x04
     15e:	88 23       	and	r24, r24
     160:	a9 f4       	brne	.+42     	; 0x18c <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
     162:	a8 e3       	ldi	r26, 0x38	; 56
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	e8 e3       	ldi	r30, 0x38	; 56
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	48 2f       	mov	r20, r24
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	28 2f       	mov	r18, r24
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 2e       	mov	r0, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_u8SetPinVal+0xee>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_u8SetPinVal+0xea>
     184:	80 95       	com	r24
     186:	84 23       	and	r24, r20
     188:	8c 93       	st	X, r24
     18a:	83 c0       	rjmp	.+262    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	a1 f4       	brne	.+40     	; 0x1ba <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
     192:	a8 e3       	ldi	r26, 0x38	; 56
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	e8 e3       	ldi	r30, 0x38	; 56
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	48 2f       	mov	r20, r24
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 2e       	mov	r0, r18
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_u8SetPinVal+0x11e>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_u8SetPinVal+0x11a>
     1b4:	84 2b       	or	r24, r20
     1b6:	8c 93       	st	X, r24
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	69 c0       	rjmp	.+210    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	88 23       	and	r24, r24
     1c4:	a9 f4       	brne	.+42     	; 0x1f0 <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
     1c6:	a5 e3       	ldi	r26, 0x35	; 53
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e5 e3       	ldi	r30, 0x35	; 53
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 2e       	mov	r0, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_u8SetPinVal+0x152>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_u8SetPinVal+0x14e>
     1e8:	80 95       	com	r24
     1ea:	84 23       	and	r24, r20
     1ec:	8c 93       	st	X, r24
     1ee:	51 c0       	rjmp	.+162    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     1f0:	8c 81       	ldd	r24, Y+4	; 0x04
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	a1 f4       	brne	.+40     	; 0x21e <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
     1f6:	a5 e3       	ldi	r26, 0x35	; 53
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e5 e3       	ldi	r30, 0x35	; 53
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	48 2f       	mov	r20, r24
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_u8SetPinVal+0x182>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_u8SetPinVal+0x17e>
     218:	84 2b       	or	r24, r20
     21a:	8c 93       	st	X, r24
     21c:	3a c0       	rjmp	.+116    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	37 c0       	rjmp	.+110    	; 0x292 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
     224:	8c 81       	ldd	r24, Y+4	; 0x04
     226:	88 23       	and	r24, r24
     228:	a9 f4       	brne	.+42     	; 0x254 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
     22a:	a2 e3       	ldi	r26, 0x32	; 50
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e2 e3       	ldi	r30, 0x32	; 50
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	48 2f       	mov	r20, r24
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	28 2f       	mov	r18, r24
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 2e       	mov	r0, r18
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8SetPinVal+0x1b6>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	0a 94       	dec	r0
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8SetPinVal+0x1b2>
     24c:	80 95       	com	r24
     24e:	84 23       	and	r24, r20
     250:	8c 93       	st	X, r24
     252:	1f c0       	rjmp	.+62     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
     254:	8c 81       	ldd	r24, Y+4	; 0x04
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	a1 f4       	brne	.+40     	; 0x282 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
     25a:	a2 e3       	ldi	r26, 0x32	; 50
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	e2 e3       	ldi	r30, 0x32	; 50
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	48 2f       	mov	r20, r24
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 2e       	mov	r0, r18
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8SetPinVal+0x1e6>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	0a 94       	dec	r0
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8SetPinVal+0x1e2>
     27c:	84 2b       	or	r24, r20
     27e:	8c 93       	st	X, r24
     280:	08 c0       	rjmp	.+16     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	05 c0       	rjmp	.+10     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     292:	89 81       	ldd	r24, Y+1	; 0x01
}
     294:	26 96       	adiw	r28, 0x06	; 6
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_u8SetPinDir+0x6>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPinDir+0x8>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_u8SetPinDir+0xa>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	8a 83       	std	Y+2, r24	; 0x02
     2b6:	6b 83       	std	Y+3, r22	; 0x03
     2b8:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     2be:	8b 81       	ldd	r24, Y+3	; 0x03
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <DIO_u8SetPinDir+0x20>
     2c4:	ee c0       	rjmp	.+476    	; 0x4a2 <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	28 2f       	mov	r18, r24
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	3e 83       	std	Y+6, r19	; 0x06
     2ce:	2d 83       	std	Y+5, r18	; 0x05
     2d0:	8d 81       	ldd	r24, Y+5	; 0x05
     2d2:	9e 81       	ldd	r25, Y+6	; 0x06
     2d4:	89 30       	cpi	r24, 0x09	; 9
     2d6:	91 05       	cpc	r25, r1
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_u8SetPinDir+0x36>
     2da:	4a c0       	rjmp	.+148    	; 0x370 <DIO_u8SetPinDir+0xca>
     2dc:	2d 81       	ldd	r18, Y+5	; 0x05
     2de:	3e 81       	ldd	r19, Y+6	; 0x06
     2e0:	2a 30       	cpi	r18, 0x0A	; 10
     2e2:	31 05       	cpc	r19, r1
     2e4:	34 f4       	brge	.+12     	; 0x2f2 <DIO_u8SetPinDir+0x4c>
     2e6:	8d 81       	ldd	r24, Y+5	; 0x05
     2e8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ea:	88 30       	cpi	r24, 0x08	; 8
     2ec:	91 05       	cpc	r25, r1
     2ee:	71 f0       	breq	.+28     	; 0x30c <DIO_u8SetPinDir+0x66>
     2f0:	d5 c0       	rjmp	.+426    	; 0x49c <DIO_u8SetPinDir+0x1f6>
     2f2:	2d 81       	ldd	r18, Y+5	; 0x05
     2f4:	3e 81       	ldd	r19, Y+6	; 0x06
     2f6:	2a 30       	cpi	r18, 0x0A	; 10
     2f8:	31 05       	cpc	r19, r1
     2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_u8SetPinDir+0x58>
     2fc:	6b c0       	rjmp	.+214    	; 0x3d4 <DIO_u8SetPinDir+0x12e>
     2fe:	8d 81       	ldd	r24, Y+5	; 0x05
     300:	9e 81       	ldd	r25, Y+6	; 0x06
     302:	8b 30       	cpi	r24, 0x0B	; 11
     304:	91 05       	cpc	r25, r1
     306:	09 f4       	brne	.+2      	; 0x30a <DIO_u8SetPinDir+0x64>
     308:	97 c0       	rjmp	.+302    	; 0x438 <DIO_u8SetPinDir+0x192>
     30a:	c8 c0       	rjmp	.+400    	; 0x49c <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	a1 f4       	brne	.+40     	; 0x33a <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
     312:	aa e3       	ldi	r26, 0x3A	; 58
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ea e3       	ldi	r30, 0x3A	; 58
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	48 2f       	mov	r20, r24
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 2e       	mov	r0, r18
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_u8SetPinDir+0x8a>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_u8SetPinDir+0x86>
     334:	84 2b       	or	r24, r20
     336:	8c 93       	st	X, r24
     338:	b6 c0       	rjmp	.+364    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     33a:	8c 81       	ldd	r24, Y+4	; 0x04
     33c:	88 23       	and	r24, r24
     33e:	a9 f4       	brne	.+42     	; 0x36a <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
     340:	aa e3       	ldi	r26, 0x3A	; 58
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	ea e3       	ldi	r30, 0x3A	; 58
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	48 2f       	mov	r20, r24
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 2e       	mov	r0, r18
     358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinDir+0xb8>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	0a 94       	dec	r0
     360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8SetPinDir+0xb4>
     362:	80 95       	com	r24
     364:	84 23       	and	r24, r20
     366:	8c 93       	st	X, r24
     368:	9e c0       	rjmp	.+316    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	9b c0       	rjmp	.+310    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	a1 f4       	brne	.+40     	; 0x39e <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
     376:	a7 e3       	ldi	r26, 0x37	; 55
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e7 e3       	ldi	r30, 0x37	; 55
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	48 2f       	mov	r20, r24
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 2e       	mov	r0, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8SetPinDir+0xee>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8SetPinDir+0xea>
     398:	84 2b       	or	r24, r20
     39a:	8c 93       	st	X, r24
     39c:	84 c0       	rjmp	.+264    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	88 23       	and	r24, r24
     3a2:	a9 f4       	brne	.+42     	; 0x3ce <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
     3a4:	a7 e3       	ldi	r26, 0x37	; 55
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e7 e3       	ldi	r30, 0x37	; 55
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	48 2f       	mov	r20, r24
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 2e       	mov	r0, r18
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8SetPinDir+0x11c>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8SetPinDir+0x118>
     3c6:	80 95       	com	r24
     3c8:	84 23       	and	r24, r20
     3ca:	8c 93       	st	X, r24
     3cc:	6c c0       	rjmp	.+216    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	69 c0       	rjmp	.+210    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	a1 f4       	brne	.+40     	; 0x402 <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
     3da:	a4 e3       	ldi	r26, 0x34	; 52
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e4 e3       	ldi	r30, 0x34	; 52
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	48 2f       	mov	r20, r24
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 2e       	mov	r0, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8SetPinDir+0x152>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8SetPinDir+0x14e>
     3fc:	84 2b       	or	r24, r20
     3fe:	8c 93       	st	X, r24
     400:	52 c0       	rjmp	.+164    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     402:	8c 81       	ldd	r24, Y+4	; 0x04
     404:	88 23       	and	r24, r24
     406:	a9 f4       	brne	.+42     	; 0x432 <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
     408:	a4 e3       	ldi	r26, 0x34	; 52
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e4 e3       	ldi	r30, 0x34	; 52
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	48 2f       	mov	r20, r24
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	28 2f       	mov	r18, r24
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 2e       	mov	r0, r18
     420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8SetPinDir+0x180>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	0a 94       	dec	r0
     428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8SetPinDir+0x17c>
     42a:	80 95       	com	r24
     42c:	84 23       	and	r24, r20
     42e:	8c 93       	st	X, r24
     430:	3a c0       	rjmp	.+116    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	37 c0       	rjmp	.+110    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	a1 f4       	brne	.+40     	; 0x466 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
     43e:	a1 e3       	ldi	r26, 0x31	; 49
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e1 e3       	ldi	r30, 0x31	; 49
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	48 2f       	mov	r20, r24
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_u8SetPinDir+0x1b6>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_u8SetPinDir+0x1b2>
     460:	84 2b       	or	r24, r20
     462:	8c 93       	st	X, r24
     464:	20 c0       	rjmp	.+64     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	88 23       	and	r24, r24
     46a:	a9 f4       	brne	.+42     	; 0x496 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
     46c:	a1 e3       	ldi	r26, 0x31	; 49
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e1 e3       	ldi	r30, 0x31	; 49
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	48 2f       	mov	r20, r24
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	28 2f       	mov	r18, r24
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 2e       	mov	r0, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_u8SetPinDir+0x1e4>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_u8SetPinDir+0x1e0>
     48e:	80 95       	com	r24
     490:	84 23       	and	r24, r20
     492:	8c 93       	st	X, r24
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a8:	26 96       	adiw	r28, 0x06	; 6
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <DIO_u8SetPortVal+0x6>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <DIO_u8SetPortVal+0x8>
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	28 2f       	mov	r18, r24
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	3d 83       	std	Y+5, r19	; 0x05
     4d8:	2c 83       	std	Y+4, r18	; 0x04
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	9d 81       	ldd	r25, Y+5	; 0x05
     4de:	89 30       	cpi	r24, 0x09	; 9
     4e0:	91 05       	cpc	r25, r1
     4e2:	d9 f0       	breq	.+54     	; 0x51a <DIO_u8SetPortVal+0x60>
     4e4:	2c 81       	ldd	r18, Y+4	; 0x04
     4e6:	3d 81       	ldd	r19, Y+5	; 0x05
     4e8:	2a 30       	cpi	r18, 0x0A	; 10
     4ea:	31 05       	cpc	r19, r1
     4ec:	34 f4       	brge	.+12     	; 0x4fa <DIO_u8SetPortVal+0x40>
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	9d 81       	ldd	r25, Y+5	; 0x05
     4f2:	88 30       	cpi	r24, 0x08	; 8
     4f4:	91 05       	cpc	r25, r1
     4f6:	61 f0       	breq	.+24     	; 0x510 <DIO_u8SetPortVal+0x56>
     4f8:	1f c0       	rjmp	.+62     	; 0x538 <DIO_u8SetPortVal+0x7e>
     4fa:	2c 81       	ldd	r18, Y+4	; 0x04
     4fc:	3d 81       	ldd	r19, Y+5	; 0x05
     4fe:	2a 30       	cpi	r18, 0x0A	; 10
     500:	31 05       	cpc	r19, r1
     502:	81 f0       	breq	.+32     	; 0x524 <DIO_u8SetPortVal+0x6a>
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	9d 81       	ldd	r25, Y+5	; 0x05
     508:	8b 30       	cpi	r24, 0x0B	; 11
     50a:	91 05       	cpc	r25, r1
     50c:	81 f0       	breq	.+32     	; 0x52e <DIO_u8SetPortVal+0x74>
     50e:	14 c0       	rjmp	.+40     	; 0x538 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
     510:	eb e3       	ldi	r30, 0x3B	; 59
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	80 83       	st	Z, r24
     518:	11 c0       	rjmp	.+34     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
     51a:	e8 e3       	ldi	r30, 0x38	; 56
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	80 83       	st	Z, r24
     522:	0c c0       	rjmp	.+24     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
     524:	e5 e3       	ldi	r30, 0x35	; 53
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	80 83       	st	Z, r24
     52c:	07 c0       	rjmp	.+14     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
     52e:	e2 e3       	ldi	r30, 0x32	; 50
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	80 83       	st	Z, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     53c:	89 81       	ldd	r24, Y+1	; 0x01
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	00 d0       	rcall	.+0      	; 0x554 <DIO_u8SetPortDir+0x6>
     554:	00 d0       	rcall	.+0      	; 0x556 <DIO_u8SetPortDir+0x8>
     556:	0f 92       	push	r0
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	8a 83       	std	Y+2, r24	; 0x02
     55e:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	3d 83       	std	Y+5, r19	; 0x05
     56c:	2c 83       	std	Y+4, r18	; 0x04
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	89 30       	cpi	r24, 0x09	; 9
     574:	91 05       	cpc	r25, r1
     576:	d9 f0       	breq	.+54     	; 0x5ae <DIO_u8SetPortDir+0x60>
     578:	2c 81       	ldd	r18, Y+4	; 0x04
     57a:	3d 81       	ldd	r19, Y+5	; 0x05
     57c:	2a 30       	cpi	r18, 0x0A	; 10
     57e:	31 05       	cpc	r19, r1
     580:	34 f4       	brge	.+12     	; 0x58e <DIO_u8SetPortDir+0x40>
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	9d 81       	ldd	r25, Y+5	; 0x05
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	91 05       	cpc	r25, r1
     58a:	61 f0       	breq	.+24     	; 0x5a4 <DIO_u8SetPortDir+0x56>
     58c:	1f c0       	rjmp	.+62     	; 0x5cc <DIO_u8SetPortDir+0x7e>
     58e:	2c 81       	ldd	r18, Y+4	; 0x04
     590:	3d 81       	ldd	r19, Y+5	; 0x05
     592:	2a 30       	cpi	r18, 0x0A	; 10
     594:	31 05       	cpc	r19, r1
     596:	81 f0       	breq	.+32     	; 0x5b8 <DIO_u8SetPortDir+0x6a>
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	9d 81       	ldd	r25, Y+5	; 0x05
     59c:	8b 30       	cpi	r24, 0x0B	; 11
     59e:	91 05       	cpc	r25, r1
     5a0:	81 f0       	breq	.+32     	; 0x5c2 <DIO_u8SetPortDir+0x74>
     5a2:	14 c0       	rjmp	.+40     	; 0x5cc <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
     5a4:	ea e3       	ldi	r30, 0x3A	; 58
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	80 83       	st	Z, r24
     5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
     5ae:	e7 e3       	ldi	r30, 0x37	; 55
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	80 83       	st	Z, r24
     5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
     5b8:	e4 e3       	ldi	r30, 0x34	; 52
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	80 83       	st	Z, r24
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
     5c2:	e1 e3       	ldi	r30, 0x31	; 49
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	80 83       	st	Z, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	08 95       	ret

000005e2 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	27 97       	sbiw	r28, 0x07	; 7
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8a 83       	std	Y+2, r24	; 0x02
     5f8:	6b 83       	std	Y+3, r22	; 0x03
     5fa:	5d 83       	std	Y+5, r21	; 0x05
     5fc:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	88 30       	cpi	r24, 0x08	; 8
     606:	08 f0       	brcs	.+2      	; 0x60a <DIO_u8GetPinVal+0x28>
     608:	74 c0       	rjmp	.+232    	; 0x6f2 <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	3f 83       	std	Y+7, r19	; 0x07
     612:	2e 83       	std	Y+6, r18	; 0x06
     614:	4e 81       	ldd	r20, Y+6	; 0x06
     616:	5f 81       	ldd	r21, Y+7	; 0x07
     618:	49 30       	cpi	r20, 0x09	; 9
     61a:	51 05       	cpc	r21, r1
     61c:	59 f1       	breq	.+86     	; 0x674 <DIO_u8GetPinVal+0x92>
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	9f 81       	ldd	r25, Y+7	; 0x07
     622:	8a 30       	cpi	r24, 0x0A	; 10
     624:	91 05       	cpc	r25, r1
     626:	34 f4       	brge	.+12     	; 0x634 <DIO_u8GetPinVal+0x52>
     628:	2e 81       	ldd	r18, Y+6	; 0x06
     62a:	3f 81       	ldd	r19, Y+7	; 0x07
     62c:	28 30       	cpi	r18, 0x08	; 8
     62e:	31 05       	cpc	r19, r1
     630:	69 f0       	breq	.+26     	; 0x64c <DIO_u8GetPinVal+0x6a>
     632:	5c c0       	rjmp	.+184    	; 0x6ec <DIO_u8GetPinVal+0x10a>
     634:	4e 81       	ldd	r20, Y+6	; 0x06
     636:	5f 81       	ldd	r21, Y+7	; 0x07
     638:	4a 30       	cpi	r20, 0x0A	; 10
     63a:	51 05       	cpc	r21, r1
     63c:	79 f1       	breq	.+94     	; 0x69c <DIO_u8GetPinVal+0xba>
     63e:	8e 81       	ldd	r24, Y+6	; 0x06
     640:	9f 81       	ldd	r25, Y+7	; 0x07
     642:	8b 30       	cpi	r24, 0x0B	; 11
     644:	91 05       	cpc	r25, r1
     646:	09 f4       	brne	.+2      	; 0x64a <DIO_u8GetPinVal+0x68>
     648:	3d c0       	rjmp	.+122    	; 0x6c4 <DIO_u8GetPinVal+0xe2>
     64a:	50 c0       	rjmp	.+160    	; 0x6ec <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
     64c:	e9 e3       	ldi	r30, 0x39	; 57
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	28 2f       	mov	r18, r24
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8GetPinVal+0x82>
     660:	55 95       	asr	r21
     662:	47 95       	ror	r20
     664:	8a 95       	dec	r24
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_u8GetPinVal+0x7e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	ec 81       	ldd	r30, Y+4	; 0x04
     66e:	fd 81       	ldd	r31, Y+5	; 0x05
     670:	80 83       	st	Z, r24
     672:	41 c0       	rjmp	.+130    	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
     674:	e6 e3       	ldi	r30, 0x36	; 54
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	28 2f       	mov	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	a9 01       	movw	r20, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_u8GetPinVal+0xaa>
     688:	55 95       	asr	r21
     68a:	47 95       	ror	r20
     68c:	8a 95       	dec	r24
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_u8GetPinVal+0xa6>
     690:	ca 01       	movw	r24, r20
     692:	81 70       	andi	r24, 0x01	; 1
     694:	ec 81       	ldd	r30, Y+4	; 0x04
     696:	fd 81       	ldd	r31, Y+5	; 0x05
     698:	80 83       	st	Z, r24
     69a:	2d c0       	rjmp	.+90     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
     69c:	e3 e3       	ldi	r30, 0x33	; 51
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a9 01       	movw	r20, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8GetPinVal+0xd2>
     6b0:	55 95       	asr	r21
     6b2:	47 95       	ror	r20
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8GetPinVal+0xce>
     6b8:	ca 01       	movw	r24, r20
     6ba:	81 70       	andi	r24, 0x01	; 1
     6bc:	ec 81       	ldd	r30, Y+4	; 0x04
     6be:	fd 81       	ldd	r31, Y+5	; 0x05
     6c0:	80 83       	st	Z, r24
     6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
     6c4:	e0 e3       	ldi	r30, 0x30	; 48
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	28 2f       	mov	r18, r24
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_u8GetPinVal+0xfa>
     6d8:	55 95       	asr	r21
     6da:	47 95       	ror	r20
     6dc:	8a 95       	dec	r24
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_u8GetPinVal+0xf6>
     6e0:	ca 01       	movw	r24, r20
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	ec 81       	ldd	r30, Y+4	; 0x04
     6e6:	fd 81       	ldd	r31, Y+5	; 0x05
     6e8:	80 83       	st	Z, r24
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     6f8:	27 96       	adiw	r28, 0x07	; 7
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	08 95       	ret

0000070a <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_u8GetPortVal+0x6>
     710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8GetPortVal+0x8>
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_u8GetPortVal+0xa>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	8a 83       	std	Y+2, r24	; 0x02
     71a:	7c 83       	std	Y+4, r23	; 0x04
     71c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	3e 83       	std	Y+6, r19	; 0x06
     72a:	2d 83       	std	Y+5, r18	; 0x05
     72c:	8d 81       	ldd	r24, Y+5	; 0x05
     72e:	9e 81       	ldd	r25, Y+6	; 0x06
     730:	89 30       	cpi	r24, 0x09	; 9
     732:	91 05       	cpc	r25, r1
     734:	e9 f0       	breq	.+58     	; 0x770 <DIO_u8GetPortVal+0x66>
     736:	2d 81       	ldd	r18, Y+5	; 0x05
     738:	3e 81       	ldd	r19, Y+6	; 0x06
     73a:	2a 30       	cpi	r18, 0x0A	; 10
     73c:	31 05       	cpc	r19, r1
     73e:	34 f4       	brge	.+12     	; 0x74c <DIO_u8GetPortVal+0x42>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	9e 81       	ldd	r25, Y+6	; 0x06
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	91 05       	cpc	r25, r1
     748:	61 f0       	breq	.+24     	; 0x762 <DIO_u8GetPortVal+0x58>
     74a:	27 c0       	rjmp	.+78     	; 0x79a <DIO_u8GetPortVal+0x90>
     74c:	2d 81       	ldd	r18, Y+5	; 0x05
     74e:	3e 81       	ldd	r19, Y+6	; 0x06
     750:	2a 30       	cpi	r18, 0x0A	; 10
     752:	31 05       	cpc	r19, r1
     754:	a1 f0       	breq	.+40     	; 0x77e <DIO_u8GetPortVal+0x74>
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	9e 81       	ldd	r25, Y+6	; 0x06
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	91 05       	cpc	r25, r1
     75e:	b1 f0       	breq	.+44     	; 0x78c <DIO_u8GetPortVal+0x82>
     760:	1c c0       	rjmp	.+56     	; 0x79a <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
     762:	e9 e3       	ldi	r30, 0x39	; 57
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	eb 81       	ldd	r30, Y+3	; 0x03
     76a:	fc 81       	ldd	r31, Y+4	; 0x04
     76c:	80 83       	st	Z, r24
     76e:	17 c0       	rjmp	.+46     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
     770:	e6 e3       	ldi	r30, 0x36	; 54
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	eb 81       	ldd	r30, Y+3	; 0x03
     778:	fc 81       	ldd	r31, Y+4	; 0x04
     77a:	80 83       	st	Z, r24
     77c:	10 c0       	rjmp	.+32     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
     77e:	e3 e3       	ldi	r30, 0x33	; 51
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	eb 81       	ldd	r30, Y+3	; 0x03
     786:	fc 81       	ldd	r31, Y+4	; 0x04
     788:	80 83       	st	Z, r24
     78a:	09 c0       	rjmp	.+18     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
     78c:	e0 e3       	ldi	r30, 0x30	; 48
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	eb 81       	ldd	r30, Y+3	; 0x03
     794:	fc 81       	ldd	r31, Y+4	; 0x04
     796:	80 83       	st	Z, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
     79e:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a0:	26 96       	adiw	r28, 0x06	; 6
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <DIO_u8TogPinVal+0x6>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <DIO_u8TogPinVal+0x8>
     7ba:	0f 92       	push	r0
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	8a 83       	std	Y+2, r24	; 0x02
     7c2:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	88 30       	cpi	r24, 0x08	; 8
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <DIO_u8TogPinVal+0x1e>
     7ce:	73 c0       	rjmp	.+230    	; 0x8b6 <__stack+0x57>
		{
			switch(u8_PortNum)
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	28 2f       	mov	r18, r24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	3d 83       	std	Y+5, r19	; 0x05
     7d8:	2c 83       	std	Y+4, r18	; 0x04
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	9d 81       	ldd	r25, Y+5	; 0x05
     7de:	89 30       	cpi	r24, 0x09	; 9
     7e0:	91 05       	cpc	r25, r1
     7e2:	51 f1       	breq	.+84     	; 0x838 <DIO_u8TogPinVal+0x86>
     7e4:	2c 81       	ldd	r18, Y+4	; 0x04
     7e6:	3d 81       	ldd	r19, Y+5	; 0x05
     7e8:	2a 30       	cpi	r18, 0x0A	; 10
     7ea:	31 05       	cpc	r19, r1
     7ec:	34 f4       	brge	.+12     	; 0x7fa <DIO_u8TogPinVal+0x48>
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	9d 81       	ldd	r25, Y+5	; 0x05
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	91 05       	cpc	r25, r1
     7f6:	61 f0       	breq	.+24     	; 0x810 <DIO_u8TogPinVal+0x5e>
     7f8:	5b c0       	rjmp	.+182    	; 0x8b0 <__stack+0x51>
     7fa:	2c 81       	ldd	r18, Y+4	; 0x04
     7fc:	3d 81       	ldd	r19, Y+5	; 0x05
     7fe:	2a 30       	cpi	r18, 0x0A	; 10
     800:	31 05       	cpc	r19, r1
     802:	71 f1       	breq	.+92     	; 0x860 <__stack+0x1>
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	8b 30       	cpi	r24, 0x0B	; 11
     80a:	91 05       	cpc	r25, r1
     80c:	e9 f1       	breq	.+122    	; 0x888 <__stack+0x29>
     80e:	50 c0       	rjmp	.+160    	; 0x8b0 <__stack+0x51>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
     810:	ab e3       	ldi	r26, 0x3B	; 59
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	eb e3       	ldi	r30, 0x3B	; 59
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	48 2f       	mov	r20, r24
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 2e       	mov	r0, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_u8TogPinVal+0x7c>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	0a 94       	dec	r0
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_u8TogPinVal+0x78>
     832:	84 27       	eor	r24, r20
     834:	8c 93       	st	X, r24
     836:	41 c0       	rjmp	.+130    	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
     838:	a8 e3       	ldi	r26, 0x38	; 56
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e8 e3       	ldi	r30, 0x38	; 56
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	48 2f       	mov	r20, r24
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	28 2f       	mov	r18, r24
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	02 2e       	mov	r0, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_u8TogPinVal+0xa4>
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	0a 94       	dec	r0
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_u8TogPinVal+0xa0>
     85a:	84 27       	eor	r24, r20
     85c:	8c 93       	st	X, r24
     85e:	2d c0       	rjmp	.+90     	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
     860:	a5 e3       	ldi	r26, 0x35	; 53
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e5 e3       	ldi	r30, 0x35	; 53
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	48 2f       	mov	r20, r24
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	02 2e       	mov	r0, r18
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	0a 94       	dec	r0
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	84 27       	eor	r24, r20
     884:	8c 93       	st	X, r24
     886:	19 c0       	rjmp	.+50     	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
     888:	a2 e3       	ldi	r26, 0x32	; 50
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e2 e3       	ldi	r30, 0x32	; 50
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	48 2f       	mov	r20, r24
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	84 27       	eor	r24, r20
     8ac:	8c 93       	st	X, r24
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__stack+0x5b>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
     8d4:	a0 e5       	ldi	r26, 0x50	; 80
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e5       	ldi	r30, 0x50	; 80
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	8c 93       	st	X, r24
}
     8e2:	cf 91       	pop	r28
     8e4:	df 91       	pop	r29
     8e6:	08 95       	ret

000008e8 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
     8f0:	a0 e5       	ldi	r26, 0x50	; 80
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	e0 e5       	ldi	r30, 0x50	; 80
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8b 7f       	andi	r24, 0xFB	; 251
     8fc:	8c 93       	st	X, r24
}
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <LED_voidInit>:
#include "primitive_data_types.h"
#include "dio_interface.h"
#include "led_interface.h"

void LED_voidInit(void)
{
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED0,u8_DIO_OUTPUT_PIN)          ;
     90c:	89 e0       	ldi	r24, 0x09	; 9
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED1,u8_DIO_OUTPUT_PIN)          ;
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	65 e0       	ldi	r22, 0x05	; 5
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED2,u8_DIO_OUTPUT_PIN)          ;
     920:	89 e0       	ldi	r24, 0x09	; 9
     922:	66 e0       	ldi	r22, 0x06	; 6
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED3,u8_DIO_OUTPUT_PIN)          ;
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	67 e0       	ldi	r22, 0x07	; 7
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED0,u8_DIO_PIN_LOW)          ;
     934:	89 e0       	ldi	r24, 0x09	; 9
     936:	64 e0       	ldi	r22, 0x04	; 4
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED1,u8_DIO_PIN_LOW)          ;
     93e:	89 e0       	ldi	r24, 0x09	; 9
     940:	65 e0       	ldi	r22, 0x05	; 5
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED2,u8_DIO_PIN_LOW)          ;
     948:	89 e0       	ldi	r24, 0x09	; 9
     94a:	66 e0       	ldi	r22, 0x06	; 6
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED3,u8_DIO_PIN_LOW)          ;
     952:	89 e0       	ldi	r24, 0x09	; 9
     954:	67 e0       	ldi	r22, 0x07	; 7
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>


}
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	08 95       	ret

00000962 <LED_u8On>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8On(uint8_t u8_LedNum) 
{
     962:	df 93       	push	r29
     964:	cf 93       	push	r28
     966:	00 d0       	rcall	.+0      	; 0x968 <LED_u8On+0x6>
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	88 30       	cpi	r24, 0x08	; 8
     976:	48 f4       	brcc	.+18     	; 0x98a <LED_u8On+0x28>
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	30 f0       	brcs	.+12     	; 0x98a <LED_u8On+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_ON)    ;  
     97e:	89 e0       	ldi	r24, 0x09	; 9
     980:	6a 81       	ldd	r22, Y+2	; 0x02
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
     988:	02 c0       	rjmp	.+4      	; 0x98e <LED_u8On+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     98e:	89 81       	ldd	r24, Y+1	; 0x01

}
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <LED_u8Off>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Off(uint8_t u8_LedNum)  
{
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <LED_u8Off+0x6>
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	48 f4       	brcc	.+18     	; 0x9c2 <LED_u8Off+0x28>
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	84 30       	cpi	r24, 0x04	; 4
     9b4:	30 f0       	brcs	.+12     	; 0x9c2 <LED_u8Off+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_OFF)    ;  
     9b6:	89 e0       	ldi	r24, 0x09	; 9
     9b8:	6a 81       	ldd	r22, Y+2	; 0x02
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <LED_u8Off+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     9c2:	85 e0       	ldi	r24, 0x05	; 5
     9c4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     9c6:	89 81       	ldd	r24, Y+1	; 0x01

}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	cf 91       	pop	r28
     9ce:	df 91       	pop	r29
     9d0:	08 95       	ret

000009d2 <LED_u8Tog>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Tog(uint8_t u8_LedNum)  
{
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <LED_u8Tog+0x6>
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
     9e2:	8a 81       	ldd	r24, Y+2	; 0x02
     9e4:	88 30       	cpi	r24, 0x08	; 8
     9e6:	40 f4       	brcc	.+16     	; 0x9f8 <LED_u8Tog+0x26>
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	84 30       	cpi	r24, 0x04	; 4
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <LED_u8Tog+0x26>
	{ 
		DIO_u8TogPinVal(u8_LED_PORT,u8_LedNum)    ;  
     9ee:	89 e0       	ldi	r24, 0x09	; 9
     9f0:	6a 81       	ldd	r22, Y+2	; 0x02
     9f2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_u8TogPinVal>
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <LED_u8Tog+0x2a>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
     9fc:	89 81       	ldd	r24, Y+1	; 0x01

}
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	08 95       	ret

00000a08 <main>:
#include "DIO_interface.h"
#include "timers_interface.h"
#include "led_interface.h"

int main()
{
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidInit() ;
     a10:	0e 94 1f 05 	call	0xa3e	; 0xa3e <TIMERS_voidInit>
	LED_voidInit() ;
     a14:	0e 94 82 04 	call	0x904	; 0x904 <LED_voidInit>
	while(1)
	{
		LED_u8On(u8_LED0) ;
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	0e 94 b1 04 	call	0x962	; 0x962 <LED_u8On>
		TIMER0_u8BusyWait(300) ;
     a1e:	6c e2       	ldi	r22, 0x2C	; 44
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 00 08 	call	0x1000	; 0x1000 <TIMER0_u8BusyWait>
		LED_u8Off(u8_LED0) ;
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	0e 94 cd 04 	call	0x99a	; 0x99a <LED_u8Off>
		TIMER0_u8BusyWait(500) ;
     a30:	64 ef       	ldi	r22, 0xF4	; 244
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 00 08 	call	0x1000	; 0x1000 <TIMER0_u8BusyWait>
     a3c:	ed cf       	rjmp	.-38     	; 0xa18 <main+0x10>

00000a3e <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     a46:	a3 e5       	ldi	r26, 0x53	; 83
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e3 e5       	ldi	r30, 0x53	; 83
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	8f 7b       	andi	r24, 0xBF	; 191
     a52:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     a54:	a3 e5       	ldi	r26, 0x53	; 83
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e3 e5       	ldi	r30, 0x53	; 83
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     a62:	a3 e5       	ldi	r26, 0x53	; 83
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e3 e5       	ldi	r30, 0x53	; 83
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     a70:	a3 e5       	ldi	r26, 0x53	; 83
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e3 e5       	ldi	r30, 0x53	; 83
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8f 7d       	andi	r24, 0xDF	; 223
     a7c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     a7e:	a3 e5       	ldi	r26, 0x53	; 83
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e3 e5       	ldi	r30, 0x53	; 83
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	8f 7e       	andi	r24, 0xEF	; 239
     a8a:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     a8c:	a3 e5       	ldi	r26, 0x53	; 83
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e3 e5       	ldi	r30, 0x53	; 83
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	8b 7f       	andi	r24, 0xFB	; 251
     a98:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     a9a:	a3 e5       	ldi	r26, 0x53	; 83
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e3 e5       	ldi	r30, 0x53	; 83
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     aa8:	a3 e5       	ldi	r26, 0x53	; 83
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e3 e5       	ldi	r30, 0x53	; 83
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     ace:	8a 81       	ldd	r24, Y+2	; 0x02
     ad0:	28 2f       	mov	r18, r24
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	3c 83       	std	Y+4, r19	; 0x04
     ad6:	2b 83       	std	Y+3, r18	; 0x03
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	89 30       	cpi	r24, 0x09	; 9
     ade:	91 05       	cpc	r25, r1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     ae2:	6b c0       	rjmp	.+214    	; 0xbba <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     ae4:	2b 81       	ldd	r18, Y+3	; 0x03
     ae6:	3c 81       	ldd	r19, Y+4	; 0x04
     ae8:	2a 30       	cpi	r18, 0x0A	; 10
     aea:	31 05       	cpc	r19, r1
     aec:	8c f4       	brge	.+34     	; 0xb10 <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	87 30       	cpi	r24, 0x07	; 7
     af4:	91 05       	cpc	r25, r1
     af6:	a9 f1       	breq	.+106    	; 0xb62 <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     af8:	2b 81       	ldd	r18, Y+3	; 0x03
     afa:	3c 81       	ldd	r19, Y+4	; 0x04
     afc:	28 30       	cpi	r18, 0x08	; 8
     afe:	31 05       	cpc	r19, r1
     b00:	0c f0       	brlt	.+2      	; 0xb04 <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     b02:	45 c0       	rjmp	.+138    	; 0xb8e <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	86 30       	cpi	r24, 0x06	; 6
     b0a:	91 05       	cpc	r25, r1
     b0c:	a1 f0       	breq	.+40     	; 0xb36 <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     b0e:	ad c0       	rjmp	.+346    	; 0xc6a <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     b10:	2b 81       	ldd	r18, Y+3	; 0x03
     b12:	3c 81       	ldd	r19, Y+4	; 0x04
     b14:	2b 30       	cpi	r18, 0x0B	; 11
     b16:	31 05       	cpc	r19, r1
     b18:	09 f4       	brne	.+2      	; 0xb1c <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     b1a:	7b c0       	rjmp	.+246    	; 0xc12 <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	8b 30       	cpi	r24, 0x0B	; 11
     b22:	91 05       	cpc	r25, r1
     b24:	0c f4       	brge	.+2      	; 0xb28 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     b26:	5f c0       	rjmp	.+190    	; 0xbe6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     b28:	2b 81       	ldd	r18, Y+3	; 0x03
     b2a:	3c 81       	ldd	r19, Y+4	; 0x04
     b2c:	2c 30       	cpi	r18, 0x0C	; 12
     b2e:	31 05       	cpc	r19, r1
     b30:	09 f4       	brne	.+2      	; 0xb34 <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     b32:	85 c0       	rjmp	.+266    	; 0xc3e <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     b34:	9a c0       	rjmp	.+308    	; 0xc6a <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b36:	a3 e5       	ldi	r26, 0x53	; 83
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	e3 e5       	ldi	r30, 0x53	; 83
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8b 7f       	andi	r24, 0xFB	; 251
     b42:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b44:	a3 e5       	ldi	r26, 0x53	; 83
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	e3 e5       	ldi	r30, 0x53	; 83
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8d 7f       	andi	r24, 0xFD	; 253
     b50:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     b52:	a3 e5       	ldi	r26, 0x53	; 83
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e3 e5       	ldi	r30, 0x53	; 83
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	81 60       	ori	r24, 0x01	; 1
     b5e:	8c 93       	st	X, r24
     b60:	85 c0       	rjmp	.+266    	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b62:	a3 e5       	ldi	r26, 0x53	; 83
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e3 e5       	ldi	r30, 0x53	; 83
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8b 7f       	andi	r24, 0xFB	; 251
     b6e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b70:	a3 e5       	ldi	r26, 0x53	; 83
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e3 e5       	ldi	r30, 0x53	; 83
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	82 60       	ori	r24, 0x02	; 2
     b7c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     b7e:	a3 e5       	ldi	r26, 0x53	; 83
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e3 e5       	ldi	r30, 0x53	; 83
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8e 7f       	andi	r24, 0xFE	; 254
     b8a:	8c 93       	st	X, r24
     b8c:	6f c0       	rjmp	.+222    	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8b 7f       	andi	r24, 0xFB	; 251
     b9a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     baa:	a3 e5       	ldi	r26, 0x53	; 83
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e3 e5       	ldi	r30, 0x53	; 83
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	59 c0       	rjmp	.+178    	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     bba:	a3 e5       	ldi	r26, 0x53	; 83
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 e5       	ldi	r30, 0x53	; 83
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     bc8:	a3 e5       	ldi	r26, 0x53	; 83
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e3 e5       	ldi	r30, 0x53	; 83
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	8d 7f       	andi	r24, 0xFD	; 253
     bd4:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e3 e5       	ldi	r30, 0x53	; 83
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	8e 7f       	andi	r24, 0xFE	; 254
     be2:	8c 93       	st	X, r24
     be4:	43 c0       	rjmp	.+134    	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
     c00:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c02:	a3 e5       	ldi	r26, 0x53	; 83
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e3 e5       	ldi	r30, 0x53	; 83
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	8c 93       	st	X, r24
     c10:	2d c0       	rjmp	.+90     	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c12:	a3 e5       	ldi	r26, 0x53	; 83
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e3 e5       	ldi	r30, 0x53	; 83
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c20:	a3 e5       	ldi	r26, 0x53	; 83
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e3 e5       	ldi	r30, 0x53	; 83
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	82 60       	ori	r24, 0x02	; 2
     c2c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8e 7f       	andi	r24, 0xFE	; 254
     c3a:	8c 93       	st	X, r24
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c3e:	a3 e5       	ldi	r26, 0x53	; 83
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e3 e5       	ldi	r30, 0x53	; 83
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c4c:	a3 e5       	ldi	r26, 0x53	; 83
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e3 e5       	ldi	r30, 0x53	; 83
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	82 60       	ori	r24, 0x02	; 2
     c58:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     c5a:	a3 e5       	ldi	r26, 0x53	; 83
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e3 e5       	ldi	r30, 0x53	; 83
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     c6a:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8b 7f       	andi	r24, 0xFB	; 251
     c90:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     c92:	a3 e5       	ldi	r26, 0x53	; 83
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e3 e5       	ldi	r30, 0x53	; 83
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8d 7f       	andi	r24, 0xFD	; 253
     c9e:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     ca0:	a3 e5       	ldi	r26, 0x53	; 83
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e3 e5       	ldi	r30, 0x53	; 83
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <TIMERS_u8ClearIntFlag+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <TIMERS_u8ClearIntFlag+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3c 83       	std	Y+4, r19	; 0x04
     cce:	2b 83       	std	Y+3, r18	; 0x03
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	81 31       	cpi	r24, 0x11	; 17
     cd6:	91 05       	cpc	r25, r1
     cd8:	31 f0       	breq	.+12     	; 0xce6 <TIMERS_u8ClearIntFlag+0x32>
     cda:	2b 81       	ldd	r18, Y+3	; 0x03
     cdc:	3c 81       	ldd	r19, Y+4	; 0x04
     cde:	22 31       	cpi	r18, 0x12	; 18
     ce0:	31 05       	cpc	r19, r1
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <TIMERS_u8ClearIntFlag+0x42>
     ce4:	10 c0       	rjmp	.+32     	; 0xd06 <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     ce6:	a8 e5       	ldi	r26, 0x58	; 88
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 e5       	ldi	r30, 0x58	; 88
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	8c 93       	st	X, r24
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     cf6:	a8 e5       	ldi	r26, 0x58	; 88
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e8 e5       	ldi	r30, 0x58	; 88
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	8c 93       	st	X, r24
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     d06:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <TIMERS_u8GetIntFlag+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <TIMERS_u8GetIntFlag+0x8>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <TIMERS_u8GetIntFlag+0xa>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	7c 83       	std	Y+4, r23	; 0x04
     d2a:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3e 83       	std	Y+6, r19	; 0x06
     d38:	2d 83       	std	Y+5, r18	; 0x05
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	81 31       	cpi	r24, 0x11	; 17
     d40:	91 05       	cpc	r25, r1
     d42:	31 f0       	breq	.+12     	; 0xd50 <TIMERS_u8GetIntFlag+0x38>
     d44:	2d 81       	ldd	r18, Y+5	; 0x05
     d46:	3e 81       	ldd	r19, Y+6	; 0x06
     d48:	22 31       	cpi	r18, 0x12	; 18
     d4a:	31 05       	cpc	r19, r1
     d4c:	49 f0       	breq	.+18     	; 0xd60 <TIMERS_u8GetIntFlag+0x48>
     d4e:	11 c0       	rjmp	.+34     	; 0xd72 <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     d50:	e8 e5       	ldi	r30, 0x58	; 88
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	eb 81       	ldd	r30, Y+3	; 0x03
     d5a:	fc 81       	ldd	r31, Y+4	; 0x04
     d5c:	80 83       	st	Z, r24
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     d60:	e8 e5       	ldi	r30, 0x58	; 88
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	86 95       	lsr	r24
     d68:	81 70       	andi	r24, 0x01	; 1
     d6a:	eb 81       	ldd	r30, Y+3	; 0x03
     d6c:	fc 81       	ldd	r31, Y+4	; 0x04
     d6e:	80 83       	st	Z, r24
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     d72:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	26 96       	adiw	r28, 0x06	; 6
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIMERS_u8IntModesEn+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <TIMERS_u8IntModesEn+0x8>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	3c 83       	std	Y+4, r19	; 0x04
     da2:	2b 83       	std	Y+3, r18	; 0x03
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	81 31       	cpi	r24, 0x11	; 17
     daa:	91 05       	cpc	r25, r1
     dac:	31 f0       	breq	.+12     	; 0xdba <TIMERS_u8IntModesEn+0x32>
     dae:	2b 81       	ldd	r18, Y+3	; 0x03
     db0:	3c 81       	ldd	r19, Y+4	; 0x04
     db2:	22 31       	cpi	r18, 0x12	; 18
     db4:	31 05       	cpc	r19, r1
     db6:	81 f0       	breq	.+32     	; 0xdd8 <TIMERS_u8IntModesEn+0x50>
     db8:	1e c0       	rjmp	.+60     	; 0xdf6 <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     dba:	a8 e5       	ldi	r26, 0x58	; 88
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 e5       	ldi	r30, 0x58	; 88
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	81 60       	ori	r24, 0x01	; 1
     dc6:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     dc8:	a9 e5       	ldi	r26, 0x59	; 89
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e9 e5       	ldi	r30, 0x59	; 89
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	8c 93       	st	X, r24
     dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     dd8:	a8 e5       	ldi	r26, 0x58	; 88
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e8 e5       	ldi	r30, 0x58	; 88
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	82 60       	ori	r24, 0x02	; 2
     de4:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     de6:	a9 e5       	ldi	r26, 0x59	; 89
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e9 e5       	ldi	r30, 0x59	; 89
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	82 60       	ori	r24, 0x02	; 2
     df2:	8c 93       	st	X, r24
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     df6:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     df8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <TIMERS_u8IntModesDis+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <TIMERS_u8IntModesDis+0x8>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3c 83       	std	Y+4, r19	; 0x04
     e22:	2b 83       	std	Y+3, r18	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	81 31       	cpi	r24, 0x11	; 17
     e2a:	91 05       	cpc	r25, r1
     e2c:	31 f0       	breq	.+12     	; 0xe3a <TIMERS_u8IntModesDis+0x32>
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	3c 81       	ldd	r19, Y+4	; 0x04
     e32:	22 31       	cpi	r18, 0x12	; 18
     e34:	31 05       	cpc	r19, r1
     e36:	49 f0       	breq	.+18     	; 0xe4a <TIMERS_u8IntModesDis+0x42>
     e38:	10 c0       	rjmp	.+32     	; 0xe5a <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     e3a:	a9 e5       	ldi	r26, 0x59	; 89
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e9 e5       	ldi	r30, 0x59	; 89
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8e 7f       	andi	r24, 0xFE	; 254
     e46:	8c 93       	st	X, r24
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     e4a:	a9 e5       	ldi	r26, 0x59	; 89
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e9 e5       	ldi	r30, 0x59	; 89
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	8c 93       	st	X, r24
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     e5a:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	80 95       	com	r24
     e82:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     e84:	e2 e5       	ldi	r30, 0x52	; 82
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     eaa:	ec e5       	ldi	r30, 0x5C	; 92
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <TIMER0_u8setCallBack+0x6>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <TIMER0_u8setCallBack+0x8>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <TIMER0_u8setCallBack+0xa>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	8a 83       	std	Y+2, r24	; 0x02
     ece:	7c 83       	std	Y+4, r23	; 0x04
     ed0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	01 f1       	breq	.+64     	; 0xf1e <TIMER0_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3e 83       	std	Y+6, r19	; 0x06
     ee6:	2d 83       	std	Y+5, r18	; 0x05
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	81 31       	cpi	r24, 0x11	; 17
     eee:	91 05       	cpc	r25, r1
     ef0:	31 f0       	breq	.+12     	; 0xefe <TIMER0_u8setCallBack+0x40>
     ef2:	2d 81       	ldd	r18, Y+5	; 0x05
     ef4:	3e 81       	ldd	r19, Y+6	; 0x06
     ef6:	22 31       	cpi	r18, 0x12	; 18
     ef8:	31 05       	cpc	r19, r1
     efa:	41 f0       	breq	.+16     	; 0xf0c <TIMER0_u8setCallBack+0x4e>
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <TIMER0_u8setCallBack+0x5c>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	90 93 6d 00 	sts	0x006D, r25
     f06:	80 93 6c 00 	sts	0x006C, r24
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <TIMER0_u8setCallBack+0x62>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	90 93 6b 00 	sts	0x006B, r25
     f14:	80 93 6a 00 	sts	0x006A, r24
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <TIMER0_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     f1a:	19 82       	std	Y+1, r1	; 0x01
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <TIMER0_u8setCallBack+0x62>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     f1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	26 96       	adiw	r28, 0x06	; 6
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
     f5e:	80 91 6a 00 	lds	r24, 0x006A
     f62:	90 91 6b 00 	lds	r25, 0x006B
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	29 f0       	breq	.+10     	; 0xf74 <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
     f6a:	e0 91 6a 00 	lds	r30, 0x006A
     f6e:	f0 91 6b 00 	lds	r31, 0x006B
     f72:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
     fc4:	80 91 6c 00 	lds	r24, 0x006C
     fc8:	90 91 6d 00 	lds	r25, 0x006D
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	29 f0       	breq	.+10     	; 0xfda <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
     fd0:	e0 91 6c 00 	lds	r30, 0x006C
     fd4:	f0 91 6d 00 	lds	r31, 0x006D
     fd8:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <TIMER0_u8BusyWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWait(uint32_t u32_BusyTimeInMilliSec)
{
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	c9 54       	subi	r28, 0x49	; 73
    100e:	d0 40       	sbci	r29, 0x00	; 0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	6b 87       	std	Y+11, r22	; 0x0b
    101c:	7c 87       	std	Y+12, r23	; 0x0c
    101e:	8d 87       	std	Y+13, r24	; 0x0d
    1020:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    1022:	83 e1       	ldi	r24, 0x13	; 19
    1024:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
    1026:	80 91 61 00 	lds	r24, 0x0061
    102a:	83 31       	cpi	r24, 0x13	; 19
    102c:	09 f0       	breq	.+2      	; 0x1030 <TIMER0_u8BusyWait+0x30>
    102e:	c5 c1       	rjmp	.+906    	; 0x13ba <TIMER0_u8BusyWait+0x3ba>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    1030:	88 e1       	ldi	r24, 0x18	; 24
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	1b 82       	std	Y+3, r1	; 0x03
    1036:	1c 82       	std	Y+4, r1	; 0x04
    1038:	1d 82       	std	Y+5, r1	; 0x05
    103a:	1e 82       	std	Y+6, r1	; 0x06
    103c:	1f 82       	std	Y+7, r1	; 0x07
    103e:	18 86       	std	Y+8, r1	; 0x08
    1040:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    1042:	81 e1       	ldi	r24, 0x11	; 17
    1044:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    1048:	82 e1       	ldi	r24, 0x12	; 18
    104a:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    104e:	87 e0       	ldi	r24, 0x07	; 7
    1050:	0e 94 5e 05 	call	0xabc	; 0xabc <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    1054:	82 e1       	ldi	r24, 0x12	; 18
    1056:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    105a:	8a ef       	ldi	r24, 0xFA	; 250
    105c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	0e 94 36 07 	call	0xe6c	; 0xe6c <Timer0_u8setOverFlowRegTicksBeforeOV>
    1066:	3a c1       	rjmp	.+628    	; 0x12dc <TIMER0_u8BusyWait+0x2dc>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
    1068:	9e 01       	movw	r18, r28
    106a:	26 5f       	subi	r18, 0xF6	; 246
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	82 e1       	ldi	r24, 0x12	; 18
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 8c 06 	call	0xd18	; 0xd18 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    1076:	8a 85       	ldd	r24, Y+10	; 0x0a
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	09 f0       	breq	.+2      	; 0x107e <TIMER0_u8BusyWait+0x7e>
    107c:	2f c1       	rjmp	.+606    	; 0x12dc <TIMER0_u8BusyWait+0x2dc>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    107e:	82 e1       	ldi	r24, 0x12	; 18
    1080:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
    1084:	0a 81       	ldd	r16, Y+2	; 0x02
    1086:	0f 8f       	std	Y+31, r16	; 0x1f
    1088:	1b 81       	ldd	r17, Y+3	; 0x03
    108a:	18 a3       	std	Y+32, r17	; 0x20
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	29 a3       	std	Y+33, r18	; 0x21
    1090:	3d 81       	ldd	r19, Y+5	; 0x05
    1092:	3a a3       	std	Y+34, r19	; 0x22
    1094:	4e 81       	ldd	r20, Y+6	; 0x06
    1096:	4b a3       	std	Y+35, r20	; 0x23
    1098:	5f 81       	ldd	r21, Y+7	; 0x07
    109a:	5c a3       	std	Y+36, r21	; 0x24
    109c:	68 85       	ldd	r22, Y+8	; 0x08
    109e:	6d a3       	std	Y+37, r22	; 0x25
    10a0:	79 85       	ldd	r23, Y+9	; 0x09
    10a2:	7e a3       	std	Y+38, r23	; 0x26
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	8f a3       	std	Y+39, r24	; 0x27
    10a8:	18 a6       	std	Y+40, r1	; 0x28
    10aa:	19 a6       	std	Y+41, r1	; 0x29
    10ac:	1a a6       	std	Y+42, r1	; 0x2a
    10ae:	1b a6       	std	Y+43, r1	; 0x2b
    10b0:	1c a6       	std	Y+44, r1	; 0x2c
    10b2:	1d a6       	std	Y+45, r1	; 0x2d
    10b4:	1e a6       	std	Y+46, r1	; 0x2e
    10b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10b8:	0f a1       	ldd	r16, Y+39	; 0x27
    10ba:	90 0f       	add	r25, r16
    10bc:	9f a7       	std	Y+47, r25	; 0x2f
    10be:	11 e0       	ldi	r17, 0x01	; 1
    10c0:	1f ab       	std	Y+55, r17	; 0x37
    10c2:	2f a5       	ldd	r18, Y+47	; 0x2f
    10c4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    10c6:	23 17       	cp	r18, r19
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <TIMER0_u8BusyWait+0xcc>
    10ca:	1f aa       	std	Y+55, r1	; 0x37
    10cc:	48 a1       	ldd	r20, Y+32	; 0x20
    10ce:	58 a5       	ldd	r21, Y+40	; 0x28
    10d0:	45 0f       	add	r20, r21
    10d2:	48 ab       	std	Y+48, r20	; 0x30
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	68 af       	std	Y+56, r22	; 0x38
    10d8:	78 a9       	ldd	r23, Y+48	; 0x30
    10da:	88 a1       	ldd	r24, Y+32	; 0x20
    10dc:	78 17       	cp	r23, r24
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <TIMER0_u8BusyWait+0xe2>
    10e0:	18 ae       	std	Y+56, r1	; 0x38
    10e2:	9f a9       	ldd	r25, Y+55	; 0x37
    10e4:	08 a9       	ldd	r16, Y+48	; 0x30
    10e6:	90 0f       	add	r25, r16
    10e8:	99 af       	std	Y+57, r25	; 0x39
    10ea:	11 e0       	ldi	r17, 0x01	; 1
    10ec:	1a af       	std	Y+58, r17	; 0x3a
    10ee:	29 ad       	ldd	r18, Y+57	; 0x39
    10f0:	38 a9       	ldd	r19, Y+48	; 0x30
    10f2:	23 17       	cp	r18, r19
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <TIMER0_u8BusyWait+0xf8>
    10f6:	1a ae       	std	Y+58, r1	; 0x3a
    10f8:	48 ad       	ldd	r20, Y+56	; 0x38
    10fa:	5a ad       	ldd	r21, Y+58	; 0x3a
    10fc:	45 2b       	or	r20, r21
    10fe:	48 af       	std	Y+56, r20	; 0x38
    1100:	69 ad       	ldd	r22, Y+57	; 0x39
    1102:	68 ab       	std	Y+48, r22	; 0x30
    1104:	79 a1       	ldd	r23, Y+33	; 0x21
    1106:	89 a5       	ldd	r24, Y+41	; 0x29
    1108:	78 0f       	add	r23, r24
    110a:	79 ab       	std	Y+49, r23	; 0x31
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	9b af       	std	Y+59, r25	; 0x3b
    1110:	09 a9       	ldd	r16, Y+49	; 0x31
    1112:	19 a1       	ldd	r17, Y+33	; 0x21
    1114:	01 17       	cp	r16, r17
    1116:	08 f0       	brcs	.+2      	; 0x111a <TIMER0_u8BusyWait+0x11a>
    1118:	1b ae       	std	Y+59, r1	; 0x3b
    111a:	28 ad       	ldd	r18, Y+56	; 0x38
    111c:	39 a9       	ldd	r19, Y+49	; 0x31
    111e:	23 0f       	add	r18, r19
    1120:	2c af       	std	Y+60, r18	; 0x3c
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	4d af       	std	Y+61, r20	; 0x3d
    1126:	5c ad       	ldd	r21, Y+60	; 0x3c
    1128:	69 a9       	ldd	r22, Y+49	; 0x31
    112a:	56 17       	cp	r21, r22
    112c:	08 f0       	brcs	.+2      	; 0x1130 <TIMER0_u8BusyWait+0x130>
    112e:	1d ae       	std	Y+61, r1	; 0x3d
    1130:	7b ad       	ldd	r23, Y+59	; 0x3b
    1132:	8d ad       	ldd	r24, Y+61	; 0x3d
    1134:	78 2b       	or	r23, r24
    1136:	7b af       	std	Y+59, r23	; 0x3b
    1138:	9c ad       	ldd	r25, Y+60	; 0x3c
    113a:	99 ab       	std	Y+49, r25	; 0x31
    113c:	0a a1       	ldd	r16, Y+34	; 0x22
    113e:	1a a5       	ldd	r17, Y+42	; 0x2a
    1140:	01 0f       	add	r16, r17
    1142:	0a ab       	std	Y+50, r16	; 0x32
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	2e af       	std	Y+62, r18	; 0x3e
    1148:	3a a9       	ldd	r19, Y+50	; 0x32
    114a:	4a a1       	ldd	r20, Y+34	; 0x22
    114c:	34 17       	cp	r19, r20
    114e:	08 f0       	brcs	.+2      	; 0x1152 <TIMER0_u8BusyWait+0x152>
    1150:	1e ae       	std	Y+62, r1	; 0x3e
    1152:	5b ad       	ldd	r21, Y+59	; 0x3b
    1154:	6a a9       	ldd	r22, Y+50	; 0x32
    1156:	56 0f       	add	r21, r22
    1158:	5f af       	std	Y+63, r21	; 0x3f
    115a:	71 e0       	ldi	r23, 0x01	; 1
    115c:	21 96       	adiw	r28, 0x01	; 1
    115e:	7f af       	std	Y+63, r23	; 0x3f
    1160:	21 97       	sbiw	r28, 0x01	; 1
    1162:	8f ad       	ldd	r24, Y+63	; 0x3f
    1164:	9a a9       	ldd	r25, Y+50	; 0x32
    1166:	89 17       	cp	r24, r25
    1168:	18 f0       	brcs	.+6      	; 0x1170 <TIMER0_u8BusyWait+0x170>
    116a:	21 96       	adiw	r28, 0x01	; 1
    116c:	1f ae       	std	Y+63, r1	; 0x3f
    116e:	21 97       	sbiw	r28, 0x01	; 1
    1170:	0e ad       	ldd	r16, Y+62	; 0x3e
    1172:	21 96       	adiw	r28, 0x01	; 1
    1174:	1f ad       	ldd	r17, Y+63	; 0x3f
    1176:	21 97       	sbiw	r28, 0x01	; 1
    1178:	01 2b       	or	r16, r17
    117a:	0e af       	std	Y+62, r16	; 0x3e
    117c:	2f ad       	ldd	r18, Y+63	; 0x3f
    117e:	2a ab       	std	Y+50, r18	; 0x32
    1180:	3b a1       	ldd	r19, Y+35	; 0x23
    1182:	4b a5       	ldd	r20, Y+43	; 0x2b
    1184:	34 0f       	add	r19, r20
    1186:	3b ab       	std	Y+51, r19	; 0x33
    1188:	51 e0       	ldi	r21, 0x01	; 1
    118a:	22 96       	adiw	r28, 0x02	; 2
    118c:	5f af       	std	Y+63, r21	; 0x3f
    118e:	22 97       	sbiw	r28, 0x02	; 2
    1190:	6b a9       	ldd	r22, Y+51	; 0x33
    1192:	7b a1       	ldd	r23, Y+35	; 0x23
    1194:	67 17       	cp	r22, r23
    1196:	18 f0       	brcs	.+6      	; 0x119e <TIMER0_u8BusyWait+0x19e>
    1198:	22 96       	adiw	r28, 0x02	; 2
    119a:	1f ae       	std	Y+63, r1	; 0x3f
    119c:	22 97       	sbiw	r28, 0x02	; 2
    119e:	8e ad       	ldd	r24, Y+62	; 0x3e
    11a0:	9b a9       	ldd	r25, Y+51	; 0x33
    11a2:	89 0f       	add	r24, r25
    11a4:	23 96       	adiw	r28, 0x03	; 3
    11a6:	8f af       	std	Y+63, r24	; 0x3f
    11a8:	23 97       	sbiw	r28, 0x03	; 3
    11aa:	01 e0       	ldi	r16, 0x01	; 1
    11ac:	24 96       	adiw	r28, 0x04	; 4
    11ae:	0f af       	std	Y+63, r16	; 0x3f
    11b0:	24 97       	sbiw	r28, 0x04	; 4
    11b2:	23 96       	adiw	r28, 0x03	; 3
    11b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    11b6:	23 97       	sbiw	r28, 0x03	; 3
    11b8:	2b a9       	ldd	r18, Y+51	; 0x33
    11ba:	12 17       	cp	r17, r18
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <TIMER0_u8BusyWait+0x1c4>
    11be:	24 96       	adiw	r28, 0x04	; 4
    11c0:	1f ae       	std	Y+63, r1	; 0x3f
    11c2:	24 97       	sbiw	r28, 0x04	; 4
    11c4:	22 96       	adiw	r28, 0x02	; 2
    11c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    11c8:	22 97       	sbiw	r28, 0x02	; 2
    11ca:	24 96       	adiw	r28, 0x04	; 4
    11cc:	4f ad       	ldd	r20, Y+63	; 0x3f
    11ce:	24 97       	sbiw	r28, 0x04	; 4
    11d0:	34 2b       	or	r19, r20
    11d2:	22 96       	adiw	r28, 0x02	; 2
    11d4:	3f af       	std	Y+63, r19	; 0x3f
    11d6:	22 97       	sbiw	r28, 0x02	; 2
    11d8:	23 96       	adiw	r28, 0x03	; 3
    11da:	5f ad       	ldd	r21, Y+63	; 0x3f
    11dc:	23 97       	sbiw	r28, 0x03	; 3
    11de:	5b ab       	std	Y+51, r21	; 0x33
    11e0:	6c a1       	ldd	r22, Y+36	; 0x24
    11e2:	7c a5       	ldd	r23, Y+44	; 0x2c
    11e4:	67 0f       	add	r22, r23
    11e6:	6c ab       	std	Y+52, r22	; 0x34
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	25 96       	adiw	r28, 0x05	; 5
    11ec:	8f af       	std	Y+63, r24	; 0x3f
    11ee:	25 97       	sbiw	r28, 0x05	; 5
    11f0:	9c a9       	ldd	r25, Y+52	; 0x34
    11f2:	0c a1       	ldd	r16, Y+36	; 0x24
    11f4:	90 17       	cp	r25, r16
    11f6:	18 f0       	brcs	.+6      	; 0x11fe <TIMER0_u8BusyWait+0x1fe>
    11f8:	25 96       	adiw	r28, 0x05	; 5
    11fa:	1f ae       	std	Y+63, r1	; 0x3f
    11fc:	25 97       	sbiw	r28, 0x05	; 5
    11fe:	22 96       	adiw	r28, 0x02	; 2
    1200:	1f ad       	ldd	r17, Y+63	; 0x3f
    1202:	22 97       	sbiw	r28, 0x02	; 2
    1204:	2c a9       	ldd	r18, Y+52	; 0x34
    1206:	12 0f       	add	r17, r18
    1208:	26 96       	adiw	r28, 0x06	; 6
    120a:	1f af       	std	Y+63, r17	; 0x3f
    120c:	26 97       	sbiw	r28, 0x06	; 6
    120e:	31 e0       	ldi	r19, 0x01	; 1
    1210:	27 96       	adiw	r28, 0x07	; 7
    1212:	3f af       	std	Y+63, r19	; 0x3f
    1214:	27 97       	sbiw	r28, 0x07	; 7
    1216:	26 96       	adiw	r28, 0x06	; 6
    1218:	4f ad       	ldd	r20, Y+63	; 0x3f
    121a:	26 97       	sbiw	r28, 0x06	; 6
    121c:	5c a9       	ldd	r21, Y+52	; 0x34
    121e:	45 17       	cp	r20, r21
    1220:	18 f0       	brcs	.+6      	; 0x1228 <TIMER0_u8BusyWait+0x228>
    1222:	27 96       	adiw	r28, 0x07	; 7
    1224:	1f ae       	std	Y+63, r1	; 0x3f
    1226:	27 97       	sbiw	r28, 0x07	; 7
    1228:	25 96       	adiw	r28, 0x05	; 5
    122a:	6f ad       	ldd	r22, Y+63	; 0x3f
    122c:	25 97       	sbiw	r28, 0x05	; 5
    122e:	27 96       	adiw	r28, 0x07	; 7
    1230:	7f ad       	ldd	r23, Y+63	; 0x3f
    1232:	27 97       	sbiw	r28, 0x07	; 7
    1234:	67 2b       	or	r22, r23
    1236:	25 96       	adiw	r28, 0x05	; 5
    1238:	6f af       	std	Y+63, r22	; 0x3f
    123a:	25 97       	sbiw	r28, 0x05	; 5
    123c:	26 96       	adiw	r28, 0x06	; 6
    123e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1240:	26 97       	sbiw	r28, 0x06	; 6
    1242:	8c ab       	std	Y+52, r24	; 0x34
    1244:	9d a1       	ldd	r25, Y+37	; 0x25
    1246:	0d a5       	ldd	r16, Y+45	; 0x2d
    1248:	90 0f       	add	r25, r16
    124a:	9d ab       	std	Y+53, r25	; 0x35
    124c:	11 e0       	ldi	r17, 0x01	; 1
    124e:	28 96       	adiw	r28, 0x08	; 8
    1250:	1f af       	std	Y+63, r17	; 0x3f
    1252:	28 97       	sbiw	r28, 0x08	; 8
    1254:	2d a9       	ldd	r18, Y+53	; 0x35
    1256:	3d a1       	ldd	r19, Y+37	; 0x25
    1258:	23 17       	cp	r18, r19
    125a:	18 f0       	brcs	.+6      	; 0x1262 <TIMER0_u8BusyWait+0x262>
    125c:	28 96       	adiw	r28, 0x08	; 8
    125e:	1f ae       	std	Y+63, r1	; 0x3f
    1260:	28 97       	sbiw	r28, 0x08	; 8
    1262:	25 96       	adiw	r28, 0x05	; 5
    1264:	4f ad       	ldd	r20, Y+63	; 0x3f
    1266:	25 97       	sbiw	r28, 0x05	; 5
    1268:	5d a9       	ldd	r21, Y+53	; 0x35
    126a:	45 0f       	add	r20, r21
    126c:	29 96       	adiw	r28, 0x09	; 9
    126e:	4f af       	std	Y+63, r20	; 0x3f
    1270:	29 97       	sbiw	r28, 0x09	; 9
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	2a 96       	adiw	r28, 0x0a	; 10
    1276:	6f af       	std	Y+63, r22	; 0x3f
    1278:	2a 97       	sbiw	r28, 0x0a	; 10
    127a:	29 96       	adiw	r28, 0x09	; 9
    127c:	7f ad       	ldd	r23, Y+63	; 0x3f
    127e:	29 97       	sbiw	r28, 0x09	; 9
    1280:	8d a9       	ldd	r24, Y+53	; 0x35
    1282:	78 17       	cp	r23, r24
    1284:	18 f0       	brcs	.+6      	; 0x128c <TIMER0_u8BusyWait+0x28c>
    1286:	2a 96       	adiw	r28, 0x0a	; 10
    1288:	1f ae       	std	Y+63, r1	; 0x3f
    128a:	2a 97       	sbiw	r28, 0x0a	; 10
    128c:	28 96       	adiw	r28, 0x08	; 8
    128e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1290:	28 97       	sbiw	r28, 0x08	; 8
    1292:	2a 96       	adiw	r28, 0x0a	; 10
    1294:	0f ad       	ldd	r16, Y+63	; 0x3f
    1296:	2a 97       	sbiw	r28, 0x0a	; 10
    1298:	90 2b       	or	r25, r16
    129a:	28 96       	adiw	r28, 0x08	; 8
    129c:	9f af       	std	Y+63, r25	; 0x3f
    129e:	28 97       	sbiw	r28, 0x08	; 8
    12a0:	29 96       	adiw	r28, 0x09	; 9
    12a2:	1f ad       	ldd	r17, Y+63	; 0x3f
    12a4:	29 97       	sbiw	r28, 0x09	; 9
    12a6:	1d ab       	std	Y+53, r17	; 0x35
    12a8:	2e a1       	ldd	r18, Y+38	; 0x26
    12aa:	3e a5       	ldd	r19, Y+46	; 0x2e
    12ac:	23 0f       	add	r18, r19
    12ae:	2e ab       	std	Y+54, r18	; 0x36
    12b0:	28 96       	adiw	r28, 0x08	; 8
    12b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    12b4:	28 97       	sbiw	r28, 0x08	; 8
    12b6:	4e a9       	ldd	r20, Y+54	; 0x36
    12b8:	84 0f       	add	r24, r20
    12ba:	8e ab       	std	Y+54, r24	; 0x36
    12bc:	2f a5       	ldd	r18, Y+47	; 0x2f
    12be:	38 a9       	ldd	r19, Y+48	; 0x30
    12c0:	49 a9       	ldd	r20, Y+49	; 0x31
    12c2:	5a a9       	ldd	r21, Y+50	; 0x32
    12c4:	6b a9       	ldd	r22, Y+51	; 0x33
    12c6:	7c a9       	ldd	r23, Y+52	; 0x34
    12c8:	8d a9       	ldd	r24, Y+53	; 0x35
    12ca:	9e a9       	ldd	r25, Y+54	; 0x36
    12cc:	2a 83       	std	Y+2, r18	; 0x02
    12ce:	3b 83       	std	Y+3, r19	; 0x03
    12d0:	4c 83       	std	Y+4, r20	; 0x04
    12d2:	5d 83       	std	Y+5, r21	; 0x05
    12d4:	6e 83       	std	Y+6, r22	; 0x06
    12d6:	7f 83       	std	Y+7, r23	; 0x07
    12d8:	88 87       	std	Y+8, r24	; 0x08
    12da:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
    12dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12de:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e0:	ad 85       	ldd	r26, Y+13	; 0x0d
    12e2:	be 85       	ldd	r27, Y+14	; 0x0e
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	aa 1f       	adc	r26, r26
    12f2:	bb 1f       	adc	r27, r27
    12f4:	8c 01       	movw	r16, r24
    12f6:	9d 01       	movw	r18, r26
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	0f 8b       	std	Y+23, r16	; 0x17
    1302:	18 8f       	std	Y+24, r17	; 0x18
    1304:	29 8f       	std	Y+25, r18	; 0x19
    1306:	3a 8f       	std	Y+26, r19	; 0x1a
    1308:	4b 8f       	std	Y+27, r20	; 0x1b
    130a:	5c 8f       	std	Y+28, r21	; 0x1c
    130c:	6d 8f       	std	Y+29, r22	; 0x1d
    130e:	7e 8f       	std	Y+30, r23	; 0x1e
    1310:	1a 81       	ldd	r17, Y+2	; 0x02
    1312:	1f 87       	std	Y+15, r17	; 0x0f
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	28 8b       	std	Y+16, r18	; 0x10
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	39 8b       	std	Y+17, r19	; 0x11
    131c:	4d 81       	ldd	r20, Y+5	; 0x05
    131e:	4a 8b       	std	Y+18, r20	; 0x12
    1320:	5e 81       	ldd	r21, Y+6	; 0x06
    1322:	5b 8b       	std	Y+19, r21	; 0x13
    1324:	6f 81       	ldd	r22, Y+7	; 0x07
    1326:	6c 8b       	std	Y+20, r22	; 0x14
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	7d 8b       	std	Y+21, r23	; 0x15
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	8e 8b       	std	Y+22, r24	; 0x16
    1330:	9e 89       	ldd	r25, Y+22	; 0x16
    1332:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1334:	09 17       	cp	r16, r25
    1336:	08 f4       	brcc	.+2      	; 0x133a <TIMER0_u8BusyWait+0x33a>
    1338:	42 c0       	rjmp	.+132    	; 0x13be <TIMER0_u8BusyWait+0x3be>
    133a:	1e 89       	ldd	r17, Y+22	; 0x16
    133c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    133e:	12 17       	cp	r17, r18
    1340:	09 f0       	breq	.+2      	; 0x1344 <TIMER0_u8BusyWait+0x344>
    1342:	92 ce       	rjmp	.-732    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    1344:	3d 89       	ldd	r19, Y+21	; 0x15
    1346:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1348:	43 17       	cp	r20, r19
    134a:	c8 f1       	brcs	.+114    	; 0x13be <TIMER0_u8BusyWait+0x3be>
    134c:	5d 89       	ldd	r21, Y+21	; 0x15
    134e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1350:	56 17       	cp	r21, r22
    1352:	09 f0       	breq	.+2      	; 0x1356 <TIMER0_u8BusyWait+0x356>
    1354:	89 ce       	rjmp	.-750    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    1356:	7c 89       	ldd	r23, Y+20	; 0x14
    1358:	8c 8d       	ldd	r24, Y+28	; 0x1c
    135a:	87 17       	cp	r24, r23
    135c:	80 f1       	brcs	.+96     	; 0x13be <TIMER0_u8BusyWait+0x3be>
    135e:	9c 89       	ldd	r25, Y+20	; 0x14
    1360:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1362:	90 17       	cp	r25, r16
    1364:	09 f0       	breq	.+2      	; 0x1368 <TIMER0_u8BusyWait+0x368>
    1366:	80 ce       	rjmp	.-768    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    1368:	1b 89       	ldd	r17, Y+19	; 0x13
    136a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    136c:	21 17       	cp	r18, r17
    136e:	38 f1       	brcs	.+78     	; 0x13be <TIMER0_u8BusyWait+0x3be>
    1370:	3b 89       	ldd	r19, Y+19	; 0x13
    1372:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1374:	34 17       	cp	r19, r20
    1376:	09 f0       	breq	.+2      	; 0x137a <TIMER0_u8BusyWait+0x37a>
    1378:	77 ce       	rjmp	.-786    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    137a:	5a 89       	ldd	r21, Y+18	; 0x12
    137c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    137e:	65 17       	cp	r22, r21
    1380:	f0 f0       	brcs	.+60     	; 0x13be <TIMER0_u8BusyWait+0x3be>
    1382:	7a 89       	ldd	r23, Y+18	; 0x12
    1384:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1386:	78 17       	cp	r23, r24
    1388:	09 f0       	breq	.+2      	; 0x138c <TIMER0_u8BusyWait+0x38c>
    138a:	6e ce       	rjmp	.-804    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    138c:	99 89       	ldd	r25, Y+17	; 0x11
    138e:	09 8d       	ldd	r16, Y+25	; 0x19
    1390:	09 17       	cp	r16, r25
    1392:	a8 f0       	brcs	.+42     	; 0x13be <TIMER0_u8BusyWait+0x3be>
    1394:	19 89       	ldd	r17, Y+17	; 0x11
    1396:	29 8d       	ldd	r18, Y+25	; 0x19
    1398:	12 17       	cp	r17, r18
    139a:	09 f0       	breq	.+2      	; 0x139e <TIMER0_u8BusyWait+0x39e>
    139c:	65 ce       	rjmp	.-822    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    139e:	38 89       	ldd	r19, Y+16	; 0x10
    13a0:	48 8d       	ldd	r20, Y+24	; 0x18
    13a2:	43 17       	cp	r20, r19
    13a4:	60 f0       	brcs	.+24     	; 0x13be <TIMER0_u8BusyWait+0x3be>
    13a6:	58 89       	ldd	r21, Y+16	; 0x10
    13a8:	68 8d       	ldd	r22, Y+24	; 0x18
    13aa:	56 17       	cp	r21, r22
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <TIMER0_u8BusyWait+0x3b0>
    13ae:	5c ce       	rjmp	.-840    	; 0x1068 <TIMER0_u8BusyWait+0x68>
    13b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	87 17       	cp	r24, r23
    13b6:	18 f0       	brcs	.+6      	; 0x13be <TIMER0_u8BusyWait+0x3be>
    13b8:	57 ce       	rjmp	.-850    	; 0x1068 <TIMER0_u8BusyWait+0x68>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    13ba:	84 e1       	ldi	r24, 0x14	; 20
    13bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    13be:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    13c0:	c7 5b       	subi	r28, 0xB7	; 183
    13c2:	df 4f       	sbci	r29, 0xFF	; 255
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <TIMER0_u8InterruptWait+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <TIMER0_u8InterruptWait+0x8>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	6a 83       	std	Y+2, r22	; 0x02
    13e8:	7b 83       	std	Y+3, r23	; 0x03
    13ea:	8c 83       	std	Y+4, r24	; 0x04
    13ec:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    13ee:	83 e1       	ldi	r24, 0x13	; 19
    13f0:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED)
    13f2:	80 91 61 00 	lds	r24, 0x0061
    13f6:	83 31       	cpi	r24, 0x13	; 19
    13f8:	09 f0       	breq	.+2      	; 0x13fc <TIMER0_u8InterruptWait+0x24>
    13fa:	43 c0       	rjmp	.+134    	; 0x1482 <TIMER0_u8InterruptWait+0xaa>
	{
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    13fc:	81 e1       	ldi	r24, 0x11	; 17
    13fe:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    1402:	82 e1       	ldi	r24, 0x12	; 18
    1404:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMERS_u8IntModesDis>
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	ac 81       	ldd	r26, Y+4	; 0x04
    140e:	bd 81       	ldd	r27, Y+5	; 0x05
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	aa 1f       	adc	r26, r26
    141e:	bb 1f       	adc	r27, r27
    1420:	9c 01       	movw	r18, r24
    1422:	ad 01       	movw	r20, r26
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	20 93 62 00 	sts	0x0062, r18
    1430:	30 93 63 00 	sts	0x0063, r19
    1434:	40 93 64 00 	sts	0x0064, r20
    1438:	50 93 65 00 	sts	0x0065, r21
    143c:	60 93 66 00 	sts	0x0066, r22
    1440:	70 93 67 00 	sts	0x0067, r23
    1444:	80 93 68 00 	sts	0x0068, r24
    1448:	90 93 69 00 	sts	0x0069, r25
		TIMER0_voidstop() ;
    144c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <TIMER0_voidstop>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1450:	8a ef       	ldi	r24, 0xFA	; 250
    1452:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	0e 94 36 07 	call	0xe6c	; 0xe6c <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
    145c:	84 e1       	ldi	r24, 0x14	; 20
    145e:	80 93 61 00 	sts	0x0061, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
    1462:	82 e1       	ldi	r24, 0x12	; 18
    1464:	0e 94 c4 06 	call	0xd88	; 0xd88 <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
    1468:	2c e4       	ldi	r18, 0x4C	; 76
    146a:	3a e0       	ldi	r19, 0x0A	; 10
    146c:	82 e1       	ldi	r24, 0x12	; 18
    146e:	b9 01       	movw	r22, r18
    1470:	0e 94 5f 07 	call	0xebe	; 0xebe <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	0e 94 5e 05 	call	0xabc	; 0xabc <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    147a:	87 e1       	ldi	r24, 0x17	; 23
    147c:	80 93 60 00 	sts	0x0060, r24
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <TIMER0_u8InterruptWait+0xae>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    1482:	84 e1       	ldi	r24, 0x14	; 20
    1484:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	e3 97       	sbiw	r28, 0x33	; 51
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
	if(gu8_FlagIfTimer0Used == u8_TIMER0_FLAG_USED && gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    14ac:	80 91 61 00 	lds	r24, 0x0061
    14b0:	84 31       	cpi	r24, 0x14	; 20
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <void_IntWaitControlFlagCount+0x1e>
    14b4:	49 c1       	rjmp	.+658    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    14b6:	80 91 62 00 	lds	r24, 0x0062
    14ba:	89 87       	std	Y+9, r24	; 0x09
    14bc:	90 91 63 00 	lds	r25, 0x0063
    14c0:	9a 87       	std	Y+10, r25	; 0x0a
    14c2:	80 91 64 00 	lds	r24, 0x0064
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	90 91 65 00 	lds	r25, 0x0065
    14cc:	9c 87       	std	Y+12, r25	; 0x0c
    14ce:	80 91 66 00 	lds	r24, 0x0066
    14d2:	8d 87       	std	Y+13, r24	; 0x0d
    14d4:	90 91 67 00 	lds	r25, 0x0067
    14d8:	9e 87       	std	Y+14, r25	; 0x0e
    14da:	80 91 68 00 	lds	r24, 0x0068
    14de:	8f 87       	std	Y+15, r24	; 0x0f
    14e0:	90 91 69 00 	lds	r25, 0x0069
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	88 89       	ldd	r24, Y+16	; 0x10
    14e8:	88 23       	and	r24, r24
    14ea:	91 f5       	brne	.+100    	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    14ec:	98 89       	ldd	r25, Y+16	; 0x10
    14ee:	99 23       	and	r25, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <void_IntWaitControlFlagCount+0x5c>
    14f2:	2a c1       	rjmp	.+596    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    14f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f6:	88 23       	and	r24, r24
    14f8:	59 f5       	brne	.+86     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    14fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    14fc:	99 23       	and	r25, r25
    14fe:	09 f0       	breq	.+2      	; 0x1502 <void_IntWaitControlFlagCount+0x6a>
    1500:	23 c1       	rjmp	.+582    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    1502:	8e 85       	ldd	r24, Y+14	; 0x0e
    1504:	88 23       	and	r24, r24
    1506:	21 f5       	brne	.+72     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    1508:	9e 85       	ldd	r25, Y+14	; 0x0e
    150a:	99 23       	and	r25, r25
    150c:	09 f0       	breq	.+2      	; 0x1510 <void_IntWaitControlFlagCount+0x78>
    150e:	1c c1       	rjmp	.+568    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    1510:	8d 85       	ldd	r24, Y+13	; 0x0d
    1512:	88 23       	and	r24, r24
    1514:	e9 f4       	brne	.+58     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    1516:	9d 85       	ldd	r25, Y+13	; 0x0d
    1518:	99 23       	and	r25, r25
    151a:	09 f0       	breq	.+2      	; 0x151e <void_IntWaitControlFlagCount+0x86>
    151c:	15 c1       	rjmp	.+554    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    151e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1520:	88 23       	and	r24, r24
    1522:	b1 f4       	brne	.+44     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    1524:	9c 85       	ldd	r25, Y+12	; 0x0c
    1526:	99 23       	and	r25, r25
    1528:	09 f0       	breq	.+2      	; 0x152c <void_IntWaitControlFlagCount+0x94>
    152a:	0e c1       	rjmp	.+540    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    152c:	8b 85       	ldd	r24, Y+11	; 0x0b
    152e:	88 23       	and	r24, r24
    1530:	79 f4       	brne	.+30     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    1532:	9b 85       	ldd	r25, Y+11	; 0x0b
    1534:	99 23       	and	r25, r25
    1536:	09 f0       	breq	.+2      	; 0x153a <void_IntWaitControlFlagCount+0xa2>
    1538:	07 c1       	rjmp	.+526    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    153a:	8a 85       	ldd	r24, Y+10	; 0x0a
    153c:	88 23       	and	r24, r24
    153e:	41 f4       	brne	.+16     	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	99 23       	and	r25, r25
    1544:	09 f0       	breq	.+2      	; 0x1548 <void_IntWaitControlFlagCount+0xb0>
    1546:	00 c1       	rjmp	.+512    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	89 31       	cpi	r24, 0x19	; 25
    154c:	08 f4       	brcc	.+2      	; 0x1550 <void_IntWaitControlFlagCount+0xb8>
    154e:	fc c0       	rjmp	.+504    	; 0x1748 <void_IntWaitControlFlagCount+0x2b0>
	{
		gu64_IntWaitcounter-- ;
    1550:	90 91 62 00 	lds	r25, 0x0062
    1554:	99 83       	std	Y+1, r25	; 0x01
    1556:	80 91 63 00 	lds	r24, 0x0063
    155a:	8a 83       	std	Y+2, r24	; 0x02
    155c:	90 91 64 00 	lds	r25, 0x0064
    1560:	9b 83       	std	Y+3, r25	; 0x03
    1562:	80 91 65 00 	lds	r24, 0x0065
    1566:	8c 83       	std	Y+4, r24	; 0x04
    1568:	90 91 66 00 	lds	r25, 0x0066
    156c:	9d 83       	std	Y+5, r25	; 0x05
    156e:	80 91 67 00 	lds	r24, 0x0067
    1572:	8e 83       	std	Y+6, r24	; 0x06
    1574:	90 91 68 00 	lds	r25, 0x0068
    1578:	9f 83       	std	Y+7, r25	; 0x07
    157a:	80 91 69 00 	lds	r24, 0x0069
    157e:	88 87       	std	Y+8, r24	; 0x08
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	99 8b       	std	Y+17, r25	; 0x11
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	8a 8b       	std	Y+18, r24	; 0x12
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	9b 8b       	std	Y+19, r25	; 0x13
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	8c 8b       	std	Y+20, r24	; 0x14
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	9d 8b       	std	Y+21, r25	; 0x15
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	8e 8b       	std	Y+22, r24	; 0x16
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	9f 8b       	std	Y+23, r25	; 0x17
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	88 8f       	std	Y+24, r24	; 0x18
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	89 89       	ldd	r24, Y+17	; 0x11
    15a4:	98 0f       	add	r25, r24
    15a6:	99 8f       	std	Y+25, r25	; 0x19
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	99 a3       	std	Y+33, r25	; 0x21
    15ac:	89 8d       	ldd	r24, Y+25	; 0x19
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	89 17       	cp	r24, r25
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <void_IntWaitControlFlagCount+0x11e>
    15b4:	19 a2       	std	Y+33, r1	; 0x21
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9a 89       	ldd	r25, Y+18	; 0x12
    15ba:	89 0f       	add	r24, r25
    15bc:	8a 8f       	std	Y+26, r24	; 0x1a
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	8a a3       	std	Y+34, r24	; 0x22
    15c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	98 17       	cp	r25, r24
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <void_IntWaitControlFlagCount+0x134>
    15ca:	1a a2       	std	Y+34, r1	; 0x22
    15cc:	99 a1       	ldd	r25, Y+33	; 0x21
    15ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15d0:	98 0f       	add	r25, r24
    15d2:	9b a3       	std	Y+35, r25	; 0x23
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	9c a3       	std	Y+36, r25	; 0x24
    15d8:	8b a1       	ldd	r24, Y+35	; 0x23
    15da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15dc:	89 17       	cp	r24, r25
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <void_IntWaitControlFlagCount+0x14a>
    15e0:	1c a2       	std	Y+36, r1	; 0x24
    15e2:	8a a1       	ldd	r24, Y+34	; 0x22
    15e4:	9c a1       	ldd	r25, Y+36	; 0x24
    15e6:	89 2b       	or	r24, r25
    15e8:	8a a3       	std	Y+34, r24	; 0x22
    15ea:	8b a1       	ldd	r24, Y+35	; 0x23
    15ec:	8a 8f       	std	Y+26, r24	; 0x1a
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	8b 89       	ldd	r24, Y+19	; 0x13
    15f2:	98 0f       	add	r25, r24
    15f4:	9b 8f       	std	Y+27, r25	; 0x1b
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	9d a3       	std	Y+37, r25	; 0x25
    15fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	89 17       	cp	r24, r25
    1600:	08 f0       	brcs	.+2      	; 0x1604 <void_IntWaitControlFlagCount+0x16c>
    1602:	1d a2       	std	Y+37, r1	; 0x25
    1604:	8a a1       	ldd	r24, Y+34	; 0x22
    1606:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1608:	89 0f       	add	r24, r25
    160a:	8e a3       	std	Y+38, r24	; 0x26
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	8f a3       	std	Y+39, r24	; 0x27
    1610:	9e a1       	ldd	r25, Y+38	; 0x26
    1612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1614:	98 17       	cp	r25, r24
    1616:	08 f0       	brcs	.+2      	; 0x161a <void_IntWaitControlFlagCount+0x182>
    1618:	1f a2       	std	Y+39, r1	; 0x27
    161a:	9d a1       	ldd	r25, Y+37	; 0x25
    161c:	8f a1       	ldd	r24, Y+39	; 0x27
    161e:	98 2b       	or	r25, r24
    1620:	9d a3       	std	Y+37, r25	; 0x25
    1622:	9e a1       	ldd	r25, Y+38	; 0x26
    1624:	9b 8f       	std	Y+27, r25	; 0x1b
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9c 89       	ldd	r25, Y+20	; 0x14
    162a:	89 0f       	add	r24, r25
    162c:	8c 8f       	std	Y+28, r24	; 0x1c
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	88 a7       	std	Y+40, r24	; 0x28
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	98 17       	cp	r25, r24
    1638:	08 f0       	brcs	.+2      	; 0x163c <void_IntWaitControlFlagCount+0x1a4>
    163a:	18 a6       	std	Y+40, r1	; 0x28
    163c:	9d a1       	ldd	r25, Y+37	; 0x25
    163e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1640:	98 0f       	add	r25, r24
    1642:	99 a7       	std	Y+41, r25	; 0x29
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	9a a7       	std	Y+42, r25	; 0x2a
    1648:	89 a5       	ldd	r24, Y+41	; 0x29
    164a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164c:	89 17       	cp	r24, r25
    164e:	08 f0       	brcs	.+2      	; 0x1652 <void_IntWaitControlFlagCount+0x1ba>
    1650:	1a a6       	std	Y+42, r1	; 0x2a
    1652:	88 a5       	ldd	r24, Y+40	; 0x28
    1654:	9a a5       	ldd	r25, Y+42	; 0x2a
    1656:	89 2b       	or	r24, r25
    1658:	88 a7       	std	Y+40, r24	; 0x28
    165a:	89 a5       	ldd	r24, Y+41	; 0x29
    165c:	8c 8f       	std	Y+28, r24	; 0x1c
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	8d 89       	ldd	r24, Y+21	; 0x15
    1662:	98 0f       	add	r25, r24
    1664:	9d 8f       	std	Y+29, r25	; 0x1d
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	9b a7       	std	Y+43, r25	; 0x2b
    166a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	89 17       	cp	r24, r25
    1670:	08 f0       	brcs	.+2      	; 0x1674 <void_IntWaitControlFlagCount+0x1dc>
    1672:	1b a6       	std	Y+43, r1	; 0x2b
    1674:	88 a5       	ldd	r24, Y+40	; 0x28
    1676:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1678:	89 0f       	add	r24, r25
    167a:	8c a7       	std	Y+44, r24	; 0x2c
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	8d a7       	std	Y+45, r24	; 0x2d
    1680:	9c a5       	ldd	r25, Y+44	; 0x2c
    1682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1684:	98 17       	cp	r25, r24
    1686:	08 f0       	brcs	.+2      	; 0x168a <void_IntWaitControlFlagCount+0x1f2>
    1688:	1d a6       	std	Y+45, r1	; 0x2d
    168a:	9b a5       	ldd	r25, Y+43	; 0x2b
    168c:	8d a5       	ldd	r24, Y+45	; 0x2d
    168e:	98 2b       	or	r25, r24
    1690:	9b a7       	std	Y+43, r25	; 0x2b
    1692:	9c a5       	ldd	r25, Y+44	; 0x2c
    1694:	9d 8f       	std	Y+29, r25	; 0x1d
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9e 89       	ldd	r25, Y+22	; 0x16
    169a:	89 0f       	add	r24, r25
    169c:	8e 8f       	std	Y+30, r24	; 0x1e
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	8e a7       	std	Y+46, r24	; 0x2e
    16a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	98 17       	cp	r25, r24
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <void_IntWaitControlFlagCount+0x214>
    16aa:	1e a6       	std	Y+46, r1	; 0x2e
    16ac:	9b a5       	ldd	r25, Y+43	; 0x2b
    16ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b0:	98 0f       	add	r25, r24
    16b2:	9f a7       	std	Y+47, r25	; 0x2f
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	98 ab       	std	Y+48, r25	; 0x30
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16bc:	89 17       	cp	r24, r25
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <void_IntWaitControlFlagCount+0x22a>
    16c0:	18 aa       	std	Y+48, r1	; 0x30
    16c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    16c4:	98 a9       	ldd	r25, Y+48	; 0x30
    16c6:	89 2b       	or	r24, r25
    16c8:	8e a7       	std	Y+46, r24	; 0x2e
    16ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    16cc:	8e 8f       	std	Y+30, r24	; 0x1e
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 0f       	add	r25, r24
    16d4:	9f 8f       	std	Y+31, r25	; 0x1f
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	99 ab       	std	Y+49, r25	; 0x31
    16da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	89 17       	cp	r24, r25
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <void_IntWaitControlFlagCount+0x24c>
    16e2:	19 aa       	std	Y+49, r1	; 0x31
    16e4:	8e a5       	ldd	r24, Y+46	; 0x2e
    16e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16e8:	89 0f       	add	r24, r25
    16ea:	8a ab       	std	Y+50, r24	; 0x32
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8b ab       	std	Y+51, r24	; 0x33
    16f0:	9a a9       	ldd	r25, Y+50	; 0x32
    16f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16f4:	98 17       	cp	r25, r24
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <void_IntWaitControlFlagCount+0x262>
    16f8:	1b aa       	std	Y+51, r1	; 0x33
    16fa:	99 a9       	ldd	r25, Y+49	; 0x31
    16fc:	8b a9       	ldd	r24, Y+51	; 0x33
    16fe:	98 2b       	or	r25, r24
    1700:	99 ab       	std	Y+49, r25	; 0x31
    1702:	9a a9       	ldd	r25, Y+50	; 0x32
    1704:	9f 8f       	std	Y+31, r25	; 0x1f
    1706:	88 85       	ldd	r24, Y+8	; 0x08
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	89 0f       	add	r24, r25
    170c:	88 a3       	std	Y+32, r24	; 0x20
    170e:	89 a9       	ldd	r24, Y+49	; 0x31
    1710:	98 a1       	ldd	r25, Y+32	; 0x20
    1712:	89 0f       	add	r24, r25
    1714:	88 a3       	std	Y+32, r24	; 0x20
    1716:	29 8d       	ldd	r18, Y+25	; 0x19
    1718:	3a 8d       	ldd	r19, Y+26	; 0x1a
    171a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    171c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    171e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1720:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1722:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1724:	98 a1       	ldd	r25, Y+32	; 0x20
    1726:	20 93 62 00 	sts	0x0062, r18
    172a:	30 93 63 00 	sts	0x0063, r19
    172e:	40 93 64 00 	sts	0x0064, r20
    1732:	50 93 65 00 	sts	0x0065, r21
    1736:	60 93 66 00 	sts	0x0066, r22
    173a:	70 93 67 00 	sts	0x0067, r23
    173e:	80 93 68 00 	sts	0x0068, r24
    1742:	90 93 69 00 	sts	0x0069, r25
    1746:	06 c0       	rjmp	.+12     	; 0x1754 <void_IntWaitControlFlagCount+0x2bc>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    1748:	83 e1       	ldi	r24, 0x13	; 19
    174a:	80 93 61 00 	sts	0x0061, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    174e:	86 e1       	ldi	r24, 0x16	; 22
    1750:	80 93 60 00 	sts	0x0060, r24
	}
}
    1754:	e3 96       	adiw	r28, 0x33	; 51
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <_exit>:
    1766:	f8 94       	cli

00001768 <__stop_program>:
    1768:	ff cf       	rjmp	.-2      	; 0x1768 <__stop_program>
